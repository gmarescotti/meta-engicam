/**
 * This file was generated by:
 * "C:\Python39\Scripts\cantools generate_qt_source ..\fincantieri-app-fc02-1.2\cantools.dbc --signals all --bit-fields --no-strict --no-size-and-memset"
 * version 36.4.12 Tue Aug  2 15:22:19 2022.
 */

#ifndef CANTOOLS_QT_H
#define CANTOOLS_QT_H

#include <QObject>
#include <QVariant>
#include <QByteArray>

#include <QCanBusFrame>
#include "cantools.h"
#include <QDebug>
#include <QLoggingCategory>

#include <QTimer>
#include <QDateTime>

#include "myabstractitemmodel.h"

class cantoolsQtSignals;
class cantoolsQtMessage;

Q_DECLARE_LOGGING_CATEGORY(rgm_cantools_cantools)

/*
 * Class declaration to declare a single signal exported
 * to Qt environment.
 */
class QVariantSignalcantools : public QObject
{
    Q_OBJECT

    Q_PROPERTY(QVariant val WRITE send MEMBER m_val NOTIFY changed)
    Q_PROPERTY(QVariant silent_val WRITE silent_send MEMBER m_val)
    Q_PROPERTY(QVariant smart_val WRITE smart_send MEMBER m_val NOTIFY changed)
    Q_PROPERTY(QVariant max MEMBER m_max CONSTANT)
    Q_PROPERTY(QVariant min MEMBER m_min CONSTANT)
    Q_PROPERTY(QVariant precision MEMBER m_precision CONSTANT)
    Q_PROPERTY(QString unit MEMBER m_unit CONSTANT)
    Q_PROPERTY(QString name MEMBER m_name CONSTANT)
    Q_PROPERTY(QString description MEMBER m_description CONSTANT)

    Q_PROPERTY(cantoolsQtMessage* message MEMBER parent CONSTANT)

signals:
    void changed(QDateTime t);

public:
    QVariantSignalcantools(cantoolsQtMessage *parent, QVariant max, QVariant min, QVariant precision, QString unit, QString name, QString description) :
        parent(parent), m_val(QVariant()), m_max(max), m_min(min), m_precision(precision), m_unit(unit), m_name(name), m_description(description) {}

    cantoolsQtMessage *parent;
    QVariant m_val;
    const QVariant m_max, m_min, m_precision;
    const QString m_unit, m_name, m_description;

protected:
    virtual void send(QVariant x, int option=0) = 0;
    void silent_send(QVariant x) {
        this->send(x, 1);
    }
    void smart_send(QVariant x) {
        this->send(x, 2);
    }
};

/**
 * Class declaration to declare all signals exported
 * to Qt environment.
 */
class cantoolsQtMessage : public QObject
{
    Q_OBJECT

    Q_PROPERTY(bool valid MEMBER m_valid NOTIFY on_valid)
    Q_PROPERTY(uint frameId MEMBER m_frameId CONSTANT)
    Q_PROPERTY(bool is_extended MEMBER is_extended CONSTANT)
    Q_PROPERTY(uint length MEMBER m_length CONSTANT)
    Q_PROPERTY(uint cycle_time MEMBER m_cycle_time CONSTANT)
    Q_PROPERTY(bool owner READ get_owner WRITE set_owner)
    

public slots:
    virtual void set_owner(bool) {}
    virtual bool get_owner() {return true;}
    

signals:
    void on_valid(QDateTime t);

public:
    cantoolsQtMessage( uint frameId, bool is_extended, uint length, uint cycle_time) : 
         m_frameId(frameId), m_length(length), is_extended(is_extended), m_cycle_time(cycle_time), m_valid(false) {}

public:
    
    const uint m_frameId;
    const uint m_length;
    const bool is_extended;
    const uint m_cycle_time;
    qint64 m_timestamp;
    bool m_valid;

public:

    virtual void send_frame() = 0;
    virtual void received(const QCanBusFrame &frame) = 0;
    
    void check_exipiration_timestamp(qint64 now) {
        qCDebug(rgm_cantools_cantools) << "check_exipiration_timestamp: " << m_cycle_time << " > " << now << "-" << m_timestamp << "=" << now - m_timestamp;
        if ((m_cycle_time > 0) && (now - m_timestamp > (m_cycle_time * 15))) {
            if (m_valid) {
                m_valid = false;
                emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
        }
    }
};

/*
 * Class declaration to manage all persistent signals exported
 * to Qt environment.
 */
class QVariantHistorySignalcantools: public QVariantSignalcantools {

    Q_OBJECT

private slots:
    void update(QDateTime t);
    void update_valid(QDateTime t);

public:
    QVariantHistorySignalcantools(cantoolsQtMessage *p, QVariant max, QVariant min, QVariant precision, QString unit, QString name, QString description) :
        QVariantSignalcantools(p, max, min, precision, unit, name, description) {
        QObject::connect(this, &QVariantHistorySignalcantools::changed, this, &QVariantHistorySignalcantools::update);
        QObject::connect(this->parent, &cantoolsQtMessage::on_valid, this, &QVariantHistorySignalcantools::update_valid);
    }

    QList<QPair<QDateTime, QVariant>> m_data;
};


    class QVariantSignal_tx_pdo1_system_sub_state : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_err_wrd1_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_sdo_power_current_reference : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_status_freeze_protection : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_err_wrd2_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_vn1_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_warn_wrd1_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_mute_h2_sens_exhaust : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp3_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_system_state : public QVariantSignalcantools {
        Q_OBJECT
        
        Q_PROPERTY(QObject* choices MEMBER m_choices CONSTANT)
        
    public:
        QVariantSignal_tx_pdo1_system_state(cantoolsQtMessage *paren, QVariant max, QVariant min, QVariant precision, QString unit, QString name, QString description) :
            QVariantSignalcantools(paren, max, min, precision, unit, name, description) {
            m_choices = new EnumModel("tx_pdo1_system_state");
            
            m_choices->add(EnumType("Booting/Setup", 0));
            m_choices->add(EnumType("Maintenance", 10));
            m_choices->add(EnumType("Standby", 20));
            m_choices->add(EnumType("StartUp", 30));
            m_choices->add(EnumType("Operation", 40));
            m_choices->add(EnumType("Shutdown", 50));
            m_choices->add(EnumType("ErrorShutdown", 52));
            m_choices->add(EnumType("EmcyShutdown", 54));
            m_choices->add(EnumType("Stop", 60));
            m_choices->add(EnumType("Error", 62));
            m_choices->add(EnumType("Ready4Off", 70));
            
            QObject::connect(this, &QVariantSignalcantools::changed, [=]() {
                m_choices->changeSelection(this->m_val.toInt());
            });
        }

        void send(QVariant x, int option);
    private:
        EnumModel *m_choices;
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp4_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_vn1_spare2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_uls_est_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_uhs_est_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcxc_current_fc_side : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcxc_voltage_fc_side : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp1_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_estimated_time_to_power : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcxc_voltage_link_side : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp2_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcxc_current_link_side : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp3_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_sdo_power_current_min_handling : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tcm_hs_sec_in_sp : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp4_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tcm_hs_pri_out : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp1_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_pos_mix_valve : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_uhs_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_uls_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo4_power_current_min_state : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_hs_pre_charge_fbk_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo4_power_current_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare4_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_spare2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo4_power_current_max_state : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_ihs_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_sdo_power_current_reference : public QVariantSignalcantools {
        Q_OBJECT
        
        Q_PROPERTY(QObject* choices MEMBER m_choices CONSTANT)
        
    public:
        QVariantSignal_tx_sdo_power_current_reference(cantoolsQtMessage *paren, QVariant max, QVariant min, QVariant precision, QString unit, QString name, QString description) :
            QVariantSignalcantools(paren, max, min, precision, unit, name, description) {
            m_choices = new EnumModel("tx_sdo_power_current_reference");
            
            m_choices->add(EnumType("DCXC input", 0));
            m_choices->add(EnumType("DCXC output", 1));
            
            QObject::connect(this, &QVariantSignalcantools::changed, [=]() {
                m_choices->changeSelection(this->m_val.toInt());
            });
        }

        void send(QVariant x, int option);
    private:
        EnumModel *m_choices;
    };
    

    class QVariantSignal_tx_pdo4_power_current_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare3_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_spare3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rol_cnt_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_t_pow_unit_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo3_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp2_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo3_power_current_opt : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp2_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo3_power_current_peripheral : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp1_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo3_power_current_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_warn_wrd2_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rele_1_fbk_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_cur_avlbl_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_estimated_time_for_shutdown : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_ils_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp3_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo2_extended_info_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_fan_act_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo2_extended_info_a : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare2_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp4_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo2_event_code_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare1_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo2_event_code_a : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_run_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rdy_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_warn_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rele_2_fbk_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rele_3_fbk_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_sdo_power_current_min_handling : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ls_pre_charge_fbk_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcxc_current_sp : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ihs_lim_max_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_freeze_protectio_request : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uls_lim_min_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_spare2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uls_lim_max_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_en : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ihs_lim_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl3_uhs_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_main_mode : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ils_lim_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uls_lim_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_08 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ihs_lim_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_07 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_main_sp : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uhs_lim_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_06 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uhs_lim_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc4_warn_word4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_ind_temp1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc4_warn_word3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_03 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc4_warn_word2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_uhs_est_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc4_warn_word1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_02 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc3_err_word4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc3_err_word3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_cur_avlbl : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_uls_est_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc3_err_word2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_01 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl2_uls_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc3_err_word1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl2_ils_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_warn_wrd2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_warn_wrd1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data6 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta6_pcb_temp4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc2_max_avlb_pwr : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcdc_ctrl1_span4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_err_wrd2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc2_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcdc_ctrl1_span3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta3_err_wrd1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc2_max_avlb_current : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_uhs_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_run : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uls_lim_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc2_pwr_unit_temp : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta5_trafo_temp3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl2_uls_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_uls_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_sdo_power_current_mode : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl2_ils_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcdc_ctrl1_span2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_ihs_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_spare3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_on : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta2_ils_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_04 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_power_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_rele_in : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_status_word1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_hs_pre_charge_fbk : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data0 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data_05 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_status : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data5 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rele_1_fbk : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ls_pre_charge_fbk : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcdc_reset : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rele_2_fbk : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_maintenance_cmd : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_failure : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_t_pow_unit : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_fan_act : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rele_3_fbk : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc1_running : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ils_lim_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rol_cnt : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl3_uhs_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ils_lim_min_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_sdo_power_current_mode : public QVariantSignalcantools {
        Q_OBJECT
        
        Q_PROPERTY(QObject* choices MEMBER m_choices CONSTANT)
        
    public:
        QVariantSignal_tx_sdo_power_current_mode(cantoolsQtMessage *paren, QVariant max, QVariant min, QVariant precision, QString unit, QString name, QString description) :
            QVariantSignalcantools(paren, max, min, precision, unit, name, description) {
            m_choices = new EnumModel("tx_sdo_power_current_mode");
            
            m_choices->add(EnumType("power", 1));
            m_choices->add(EnumType("current", 0));
            
            QObject::connect(this, &QVariantSignalcantools::changed, [=]() {
                m_choices->changeSelection(this->m_val.toInt());
            });
        }

        void send(QVariant x, int option);
    private:
        EnumModel *m_choices;
    };
    

    class QVariantSignal_dc_dc_sta1_ils_lim_max_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_spare3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_err_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_pc_spare3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_system_off_request : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl3_ihs_min : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uhs_lim_max_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_pc_spare2 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_fast_shutdown_request : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl3_ihs_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_uhs_lim_min_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_tx_pdo1_pc_spare1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_rx_pdo1_power_current_max : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data4 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcxc_connection_state : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_err : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_rele_out : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_warn : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_ihs_lim_min_b : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data3 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dcdc_ctrl1_span1 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_sta1_rdy : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_dc_dc_ctrl1_fault_ack : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

    class QVariantSignal_data7 : public QVariantSignalcantools {
        using QVariantSignalcantools::QVariantSignalcantools;
        void send(QVariant x, int option);
    };
    

/**
 * Class declaration to declare all signals exported
 * to Qt environment.
 */
class cantoolsQtMessages;
class cantoolsQtSignals : public QObject
{
    Q_OBJECT

    Q_PROPERTY(cantoolsQtMessages* messages MEMBER m_messages CONSTANT)

    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_system_sub_state MEMBER m_tx_pdo1_system_sub_state CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_err_wrd1_b MEMBER m_dc_dc_sta3_err_wrd1_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_sdo_power_current_reference MEMBER m_rx_sdo_power_current_reference CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_status_freeze_protection MEMBER m_tx_pdo1_status_freeze_protection CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_err_wrd2_b MEMBER m_dc_dc_sta3_err_wrd2_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_spare1 MEMBER m_tx_pdo1_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_vn1_spare1 MEMBER m_tx_pdo1_vn1_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_warn_wrd1_b MEMBER m_dc_dc_sta3_warn_wrd1_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* mute_h2_sens_exhaust MEMBER m_mute_h2_sens_exhaust CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp3_b MEMBER m_dc_dc_sta5_trafo_temp3_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_system_state MEMBER m_tx_pdo1_system_state CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp4_b MEMBER m_dc_dc_sta5_trafo_temp4_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_vn1_spare2 MEMBER m_tx_pdo1_vn1_spare2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_uls_est_act_b MEMBER m_dc_dc_sta5_uls_est_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_uhs_est_act_b MEMBER m_dc_dc_sta5_uhs_est_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcxc_current_fc_side MEMBER m_dcxc_current_fc_side CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcxc_voltage_fc_side MEMBER m_dcxc_voltage_fc_side CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp1_b MEMBER m_dc_dc_sta6_ind_temp1_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_estimated_time_to_power MEMBER m_tx_pdo1_estimated_time_to_power CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcxc_voltage_link_side MEMBER m_dcxc_voltage_link_side CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp2_b MEMBER m_dc_dc_sta6_ind_temp2_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcxc_current_link_side MEMBER m_dcxc_current_link_side CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp3_b MEMBER m_dc_dc_sta6_ind_temp3_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_sdo_power_current_min_handling MEMBER m_tx_sdo_power_current_min_handling CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tcm_hs_sec_in_sp MEMBER m_tcm_hs_sec_in_sp CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp4_b MEMBER m_dc_dc_sta6_ind_temp4_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tcm_hs_pri_out MEMBER m_tcm_hs_pri_out CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp1_b MEMBER m_dc_dc_sta6_pcb_temp1_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* pos_mix_valve MEMBER m_pos_mix_valve CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_uhs_act_b MEMBER m_dc_dc_sta2_uhs_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_uls_act_b MEMBER m_dc_dc_sta2_uls_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo4_power_current_min_state MEMBER m_tx_pdo4_power_current_min_state CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_hs_pre_charge_fbk_b MEMBER m_dc_dc_sta1_hs_pre_charge_fbk_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo4_power_current_min MEMBER m_tx_pdo4_power_current_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare4_b MEMBER m_dc_dc_sta1_spare4_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_spare2 MEMBER m_tx_pdo1_spare2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo4_power_current_max_state MEMBER m_tx_pdo4_power_current_max_state CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_ihs_act_b MEMBER m_dc_dc_sta2_ihs_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_sdo_power_current_reference MEMBER m_tx_sdo_power_current_reference CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo4_power_current_max MEMBER m_tx_pdo4_power_current_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare3_b MEMBER m_dc_dc_sta1_spare3_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_spare3 MEMBER m_rx_pdo1_spare3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rol_cnt_b MEMBER m_dc_dc_sta1_rol_cnt_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_t_pow_unit_b MEMBER m_dc_dc_sta1_t_pow_unit_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo3_spare1 MEMBER m_tx_pdo3_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp2_b MEMBER m_dc_dc_sta6_pcb_temp2_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo3_power_current_opt MEMBER m_tx_pdo3_power_current_opt CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp2_b MEMBER m_dc_dc_sta5_trafo_temp2_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo3_power_current_peripheral MEMBER m_tx_pdo3_power_current_peripheral CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp1_b MEMBER m_dc_dc_sta5_trafo_temp1_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo3_power_current_act MEMBER m_tx_pdo3_power_current_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_warn_wrd2_b MEMBER m_dc_dc_sta3_warn_wrd2_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rele_1_fbk_b MEMBER m_dc_dc_sta1_rele_1_fbk_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_cur_avlbl_b MEMBER m_dc_dc_sta1_cur_avlbl_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_estimated_time_for_shutdown MEMBER m_tx_pdo1_estimated_time_for_shutdown CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_ils_act_b MEMBER m_dc_dc_sta2_ils_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp3_b MEMBER m_dc_dc_sta6_pcb_temp3_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo2_extended_info_b MEMBER m_tx_pdo2_extended_info_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_fan_act_b MEMBER m_dc_dc_sta1_fan_act_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo2_extended_info_a MEMBER m_tx_pdo2_extended_info_a CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare2_b MEMBER m_dc_dc_sta1_spare2_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp4_b MEMBER m_dc_dc_sta6_pcb_temp4_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo2_event_code_b MEMBER m_tx_pdo2_event_code_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare1_b MEMBER m_dc_dc_sta1_spare1_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo2_event_code_a MEMBER m_tx_pdo2_event_code_a CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_run_b MEMBER m_dc_dc_sta1_run_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rdy_b MEMBER m_dc_dc_sta1_rdy_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_warn_b MEMBER m_dc_dc_sta1_warn_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rele_2_fbk_b MEMBER m_dc_dc_sta1_rele_2_fbk_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rele_3_fbk_b MEMBER m_dc_dc_sta1_rele_3_fbk_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_sdo_power_current_min_handling MEMBER m_rx_sdo_power_current_min_handling CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ls_pre_charge_fbk_b MEMBER m_dc_dc_sta1_ls_pre_charge_fbk_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcxc_current_sp MEMBER m_dcxc_current_sp CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ihs_lim_max_b MEMBER m_dc_dc_sta1_ihs_lim_max_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_freeze_protectio_request MEMBER m_rx_pdo1_freeze_protectio_request CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare1 MEMBER m_dc_dc_sta1_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uls_lim_min_b MEMBER m_dc_dc_sta1_uls_lim_min_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_spare2 MEMBER m_rx_pdo1_spare2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uls_lim_max_b MEMBER m_dc_dc_sta1_uls_lim_max_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_en MEMBER m_dc_dc_ctrl1_en CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp3 MEMBER m_dc_dc_sta6_pcb_temp3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ihs_lim_min MEMBER m_dc_dc_sta1_ihs_lim_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl3_uhs_min MEMBER m_dc_dc_ctrl3_uhs_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp3 MEMBER m_dc_dc_sta6_ind_temp3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_main_mode MEMBER m_dc_dc_ctrl1_main_mode CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ils_lim_min MEMBER m_dc_dc_sta1_ils_lim_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp2 MEMBER m_dc_dc_sta6_pcb_temp2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uls_lim_min MEMBER m_dc_dc_sta1_uls_lim_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_08 MEMBER m_data_08 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ihs_lim_max MEMBER m_dc_dc_sta1_ihs_lim_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp4 MEMBER m_dc_dc_sta6_ind_temp4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_07 MEMBER m_data_07 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_main_sp MEMBER m_dc_dc_ctrl1_main_sp CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uhs_lim_max MEMBER m_dc_dc_sta1_uhs_lim_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp1 MEMBER m_dc_dc_sta6_pcb_temp1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_06 MEMBER m_data_06 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uhs_lim_min MEMBER m_dc_dc_sta1_uhs_lim_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp2 MEMBER m_dc_dc_sta6_ind_temp2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data2 MEMBER m_data2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc4_warn_word4 MEMBER m_dc_dc4_warn_word4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_ind_temp1 MEMBER m_dc_dc_sta6_ind_temp1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc4_warn_word3 MEMBER m_dc_dc4_warn_word3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_03 MEMBER m_data_03 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc4_warn_word2 MEMBER m_dc_dc4_warn_word2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_uhs_est_act MEMBER m_dc_dc_sta5_uhs_est_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc4_warn_word1 MEMBER m_dc_dc4_warn_word1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_02 MEMBER m_data_02 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp1 MEMBER m_dc_dc_sta5_trafo_temp1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc3_err_word4 MEMBER m_dc_dc3_err_word4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp4 MEMBER m_dc_dc_sta5_trafo_temp4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp2 MEMBER m_dc_dc_sta5_trafo_temp2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc3_err_word3 MEMBER m_dc_dc3_err_word3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_cur_avlbl MEMBER m_dc_dc_sta1_cur_avlbl CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_uls_est_act MEMBER m_dc_dc_sta5_uls_est_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc3_err_word2 MEMBER m_dc_dc3_err_word2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_01 MEMBER m_data_01 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl2_uls_min MEMBER m_dc_dc_ctrl2_uls_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc3_err_word1 MEMBER m_dc_dc3_err_word1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl2_ils_max MEMBER m_dc_dc_ctrl2_ils_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_warn_wrd2 MEMBER m_dc_dc_sta3_warn_wrd2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_warn_wrd1 MEMBER m_dc_dc_sta3_warn_wrd1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data6 MEMBER m_data6 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta6_pcb_temp4 MEMBER m_dc_dc_sta6_pcb_temp4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc2_max_avlb_pwr MEMBER m_dc_dc2_max_avlb_pwr CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcdc_ctrl1_span4 MEMBER m_dcdc_ctrl1_span4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_err_wrd2 MEMBER m_dc_dc_sta3_err_wrd2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc2_spare1 MEMBER m_dc_dc2_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcdc_ctrl1_span3 MEMBER m_dcdc_ctrl1_span3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta3_err_wrd1 MEMBER m_dc_dc_sta3_err_wrd1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc2_max_avlb_current MEMBER m_dc_dc2_max_avlb_current CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_uhs_act MEMBER m_dc_dc_sta2_uhs_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_run MEMBER m_dc_dc_sta1_run CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uls_lim_max MEMBER m_dc_dc_sta1_uls_lim_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc2_pwr_unit_temp MEMBER m_dc_dc2_pwr_unit_temp CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta5_trafo_temp3 MEMBER m_dc_dc_sta5_trafo_temp3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl2_uls_max MEMBER m_dc_dc_ctrl2_uls_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_uls_act MEMBER m_dc_dc_sta2_uls_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_sdo_power_current_mode MEMBER m_rx_sdo_power_current_mode CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl2_ils_min MEMBER m_dc_dc_ctrl2_ils_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcdc_ctrl1_span2 MEMBER m_dcdc_ctrl1_span2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_ihs_act MEMBER m_dc_dc_sta2_ihs_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_spare3 MEMBER m_dc_dc1_spare3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_on MEMBER m_dc_dc_ctrl1_on CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta2_ils_act MEMBER m_dc_dc_sta2_ils_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_04 MEMBER m_data_04 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_power_act MEMBER m_dc_dc1_power_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_rele_in MEMBER m_dc_dc_ctrl1_rele_in CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_status_word1 MEMBER m_dc_dc1_status_word1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_hs_pre_charge_fbk MEMBER m_dc_dc_sta1_hs_pre_charge_fbk CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data0 MEMBER m_data0 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare2 MEMBER m_dc_dc_sta1_spare2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data_05 MEMBER m_data_05 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_status MEMBER m_dc_dc1_status CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare4 MEMBER m_dc_dc_sta1_spare4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data5 MEMBER m_data5 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rele_1_fbk MEMBER m_dc_dc_sta1_rele_1_fbk CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ls_pre_charge_fbk MEMBER m_dc_dc_sta1_ls_pre_charge_fbk CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_spare1 MEMBER m_dc_dc1_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcdc_reset MEMBER m_dcdc_reset CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rele_2_fbk MEMBER m_dc_dc_sta1_rele_2_fbk CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_maintenance_cmd MEMBER m_rx_pdo1_maintenance_cmd CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_failure MEMBER m_dc_dc1_failure CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_t_pow_unit MEMBER m_dc_dc_sta1_t_pow_unit CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data1 MEMBER m_data1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_fan_act MEMBER m_dc_dc_sta1_fan_act CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rele_3_fbk MEMBER m_dc_dc_sta1_rele_3_fbk CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc1_running MEMBER m_dc_dc1_running CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ils_lim_max MEMBER m_dc_dc_sta1_ils_lim_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rol_cnt MEMBER m_dc_dc_sta1_rol_cnt CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl3_uhs_max MEMBER m_dc_dc_ctrl3_uhs_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_spare1 MEMBER m_rx_pdo1_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ils_lim_min_b MEMBER m_dc_dc_sta1_ils_lim_min_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_sdo_power_current_mode MEMBER m_tx_sdo_power_current_mode CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ils_lim_max_b MEMBER m_dc_dc_sta1_ils_lim_max_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_spare3 MEMBER m_dc_dc_sta1_spare3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_err_b MEMBER m_dc_dc_sta1_err_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_pc_spare3 MEMBER m_tx_pdo1_pc_spare3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_system_off_request MEMBER m_rx_pdo1_system_off_request CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl3_ihs_min MEMBER m_dc_dc_ctrl3_ihs_min CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uhs_lim_max_b MEMBER m_dc_dc_sta1_uhs_lim_max_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_pc_spare2 MEMBER m_tx_pdo1_pc_spare2 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_fast_shutdown_request MEMBER m_rx_pdo1_fast_shutdown_request CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl3_ihs_max MEMBER m_dc_dc_ctrl3_ihs_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_uhs_lim_min_b MEMBER m_dc_dc_sta1_uhs_lim_min_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* tx_pdo1_pc_spare1 MEMBER m_tx_pdo1_pc_spare1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* rx_pdo1_power_current_max MEMBER m_rx_pdo1_power_current_max CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data4 MEMBER m_data4 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcxc_connection_state MEMBER m_dcxc_connection_state CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_err MEMBER m_dc_dc_sta1_err CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_rele_out MEMBER m_dc_dc_ctrl1_rele_out CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_warn MEMBER m_dc_dc_sta1_warn CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_ihs_lim_min_b MEMBER m_dc_dc_sta1_ihs_lim_min_b CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data3 MEMBER m_data3 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dcdc_ctrl1_span1 MEMBER m_dcdc_ctrl1_span1 CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_sta1_rdy MEMBER m_dc_dc_sta1_rdy CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* dc_dc_ctrl1_fault_ack MEMBER m_dc_dc_ctrl1_fault_ack CONSTANT)
    Q_PROPERTY(QVariantSignalcantools* data7 MEMBER m_data7 CONSTANT)

private:
    cantoolsQtSignals(QObject * = nullptr);

public:
    static cantoolsQtSignals& instance() {
        static cantoolsQtSignals * _instance = nullptr;
        if ( _instance == nullptr ) {
            _instance = new cantoolsQtSignals();
        }
        return *_instance;
    }

    cantoolsQtMessages *m_messages;

    QVariantSignal_tx_pdo1_system_sub_state *m_tx_pdo1_system_sub_state;
    QVariantSignal_dc_dc_sta3_err_wrd1_b *m_dc_dc_sta3_err_wrd1_b;
    QVariantSignal_rx_sdo_power_current_reference *m_rx_sdo_power_current_reference;
    QVariantSignal_tx_pdo1_status_freeze_protection *m_tx_pdo1_status_freeze_protection;
    QVariantSignal_dc_dc_sta3_err_wrd2_b *m_dc_dc_sta3_err_wrd2_b;
    QVariantSignal_tx_pdo1_spare1 *m_tx_pdo1_spare1;
    QVariantSignal_tx_pdo1_vn1_spare1 *m_tx_pdo1_vn1_spare1;
    QVariantSignal_dc_dc_sta3_warn_wrd1_b *m_dc_dc_sta3_warn_wrd1_b;
    QVariantSignal_mute_h2_sens_exhaust *m_mute_h2_sens_exhaust;
    QVariantSignal_dc_dc_sta5_trafo_temp3_b *m_dc_dc_sta5_trafo_temp3_b;
    QVariantSignal_tx_pdo1_system_state *m_tx_pdo1_system_state;
    QVariantSignal_dc_dc_sta5_trafo_temp4_b *m_dc_dc_sta5_trafo_temp4_b;
    QVariantSignal_tx_pdo1_vn1_spare2 *m_tx_pdo1_vn1_spare2;
    QVariantSignal_dc_dc_sta5_uls_est_act_b *m_dc_dc_sta5_uls_est_act_b;
    QVariantSignal_dc_dc_sta5_uhs_est_act_b *m_dc_dc_sta5_uhs_est_act_b;
    QVariantSignal_dcxc_current_fc_side *m_dcxc_current_fc_side;
    QVariantSignal_dcxc_voltage_fc_side *m_dcxc_voltage_fc_side;
    QVariantSignal_dc_dc_sta6_ind_temp1_b *m_dc_dc_sta6_ind_temp1_b;
    QVariantSignal_tx_pdo1_estimated_time_to_power *m_tx_pdo1_estimated_time_to_power;
    QVariantSignal_dcxc_voltage_link_side *m_dcxc_voltage_link_side;
    QVariantSignal_dc_dc_sta6_ind_temp2_b *m_dc_dc_sta6_ind_temp2_b;
    QVariantSignal_dcxc_current_link_side *m_dcxc_current_link_side;
    QVariantSignal_dc_dc_sta6_ind_temp3_b *m_dc_dc_sta6_ind_temp3_b;
    QVariantSignal_tx_sdo_power_current_min_handling *m_tx_sdo_power_current_min_handling;
    QVariantSignal_tcm_hs_sec_in_sp *m_tcm_hs_sec_in_sp;
    QVariantSignal_dc_dc_sta6_ind_temp4_b *m_dc_dc_sta6_ind_temp4_b;
    QVariantSignal_tcm_hs_pri_out *m_tcm_hs_pri_out;
    QVariantSignal_dc_dc_sta6_pcb_temp1_b *m_dc_dc_sta6_pcb_temp1_b;
    QVariantSignal_pos_mix_valve *m_pos_mix_valve;
    QVariantSignal_dc_dc_sta2_uhs_act_b *m_dc_dc_sta2_uhs_act_b;
    QVariantSignal_dc_dc_sta2_uls_act_b *m_dc_dc_sta2_uls_act_b;
    QVariantSignal_tx_pdo4_power_current_min_state *m_tx_pdo4_power_current_min_state;
    QVariantSignal_dc_dc_sta1_hs_pre_charge_fbk_b *m_dc_dc_sta1_hs_pre_charge_fbk_b;
    QVariantSignal_tx_pdo4_power_current_min *m_tx_pdo4_power_current_min;
    QVariantSignal_dc_dc_sta1_spare4_b *m_dc_dc_sta1_spare4_b;
    QVariantSignal_tx_pdo1_spare2 *m_tx_pdo1_spare2;
    QVariantSignal_tx_pdo4_power_current_max_state *m_tx_pdo4_power_current_max_state;
    QVariantSignal_dc_dc_sta2_ihs_act_b *m_dc_dc_sta2_ihs_act_b;
    QVariantSignal_tx_sdo_power_current_reference *m_tx_sdo_power_current_reference;
    QVariantSignal_tx_pdo4_power_current_max *m_tx_pdo4_power_current_max;
    QVariantSignal_dc_dc_sta1_spare3_b *m_dc_dc_sta1_spare3_b;
    QVariantSignal_rx_pdo1_spare3 *m_rx_pdo1_spare3;
    QVariantSignal_dc_dc_sta1_rol_cnt_b *m_dc_dc_sta1_rol_cnt_b;
    QVariantSignal_dc_dc_sta1_t_pow_unit_b *m_dc_dc_sta1_t_pow_unit_b;
    QVariantSignal_tx_pdo3_spare1 *m_tx_pdo3_spare1;
    QVariantSignal_dc_dc_sta6_pcb_temp2_b *m_dc_dc_sta6_pcb_temp2_b;
    QVariantSignal_tx_pdo3_power_current_opt *m_tx_pdo3_power_current_opt;
    QVariantSignal_dc_dc_sta5_trafo_temp2_b *m_dc_dc_sta5_trafo_temp2_b;
    QVariantSignal_tx_pdo3_power_current_peripheral *m_tx_pdo3_power_current_peripheral;
    QVariantSignal_dc_dc_sta5_trafo_temp1_b *m_dc_dc_sta5_trafo_temp1_b;
    QVariantSignal_tx_pdo3_power_current_act *m_tx_pdo3_power_current_act;
    QVariantSignal_dc_dc_sta3_warn_wrd2_b *m_dc_dc_sta3_warn_wrd2_b;
    QVariantSignal_dc_dc_sta1_rele_1_fbk_b *m_dc_dc_sta1_rele_1_fbk_b;
    QVariantSignal_dc_dc_sta1_cur_avlbl_b *m_dc_dc_sta1_cur_avlbl_b;
    QVariantSignal_tx_pdo1_estimated_time_for_shutdown *m_tx_pdo1_estimated_time_for_shutdown;
    QVariantSignal_dc_dc_sta2_ils_act_b *m_dc_dc_sta2_ils_act_b;
    QVariantSignal_dc_dc_sta6_pcb_temp3_b *m_dc_dc_sta6_pcb_temp3_b;
    QVariantSignal_tx_pdo2_extended_info_b *m_tx_pdo2_extended_info_b;
    QVariantSignal_dc_dc_sta1_fan_act_b *m_dc_dc_sta1_fan_act_b;
    QVariantSignal_tx_pdo2_extended_info_a *m_tx_pdo2_extended_info_a;
    QVariantSignal_dc_dc_sta1_spare2_b *m_dc_dc_sta1_spare2_b;
    QVariantSignal_dc_dc_sta6_pcb_temp4_b *m_dc_dc_sta6_pcb_temp4_b;
    QVariantSignal_tx_pdo2_event_code_b *m_tx_pdo2_event_code_b;
    QVariantSignal_dc_dc_sta1_spare1_b *m_dc_dc_sta1_spare1_b;
    QVariantSignal_tx_pdo2_event_code_a *m_tx_pdo2_event_code_a;
    QVariantSignal_dc_dc_sta1_run_b *m_dc_dc_sta1_run_b;
    QVariantSignal_dc_dc_sta1_rdy_b *m_dc_dc_sta1_rdy_b;
    QVariantSignal_dc_dc_sta1_warn_b *m_dc_dc_sta1_warn_b;
    QVariantSignal_dc_dc_sta1_rele_2_fbk_b *m_dc_dc_sta1_rele_2_fbk_b;
    QVariantSignal_dc_dc_sta1_rele_3_fbk_b *m_dc_dc_sta1_rele_3_fbk_b;
    QVariantSignal_rx_sdo_power_current_min_handling *m_rx_sdo_power_current_min_handling;
    QVariantSignal_dc_dc_sta1_ls_pre_charge_fbk_b *m_dc_dc_sta1_ls_pre_charge_fbk_b;
    QVariantSignal_dcxc_current_sp *m_dcxc_current_sp;
    QVariantSignal_dc_dc_sta1_ihs_lim_max_b *m_dc_dc_sta1_ihs_lim_max_b;
    QVariantSignal_rx_pdo1_freeze_protectio_request *m_rx_pdo1_freeze_protectio_request;
    QVariantSignal_dc_dc_sta1_spare1 *m_dc_dc_sta1_spare1;
    QVariantSignal_dc_dc_sta1_uls_lim_min_b *m_dc_dc_sta1_uls_lim_min_b;
    QVariantSignal_rx_pdo1_spare2 *m_rx_pdo1_spare2;
    QVariantSignal_dc_dc_sta1_uls_lim_max_b *m_dc_dc_sta1_uls_lim_max_b;
    QVariantSignal_dc_dc_ctrl1_en *m_dc_dc_ctrl1_en;
    QVariantSignal_dc_dc_sta6_pcb_temp3 *m_dc_dc_sta6_pcb_temp3;
    QVariantSignal_dc_dc_sta1_ihs_lim_min *m_dc_dc_sta1_ihs_lim_min;
    QVariantSignal_dc_dc_ctrl3_uhs_min *m_dc_dc_ctrl3_uhs_min;
    QVariantSignal_dc_dc_sta6_ind_temp3 *m_dc_dc_sta6_ind_temp3;
    QVariantSignal_dc_dc_ctrl1_main_mode *m_dc_dc_ctrl1_main_mode;
    QVariantSignal_dc_dc_sta1_ils_lim_min *m_dc_dc_sta1_ils_lim_min;
    QVariantSignal_dc_dc_sta6_pcb_temp2 *m_dc_dc_sta6_pcb_temp2;
    QVariantSignal_dc_dc_sta1_uls_lim_min *m_dc_dc_sta1_uls_lim_min;
    QVariantSignal_data_08 *m_data_08;
    QVariantSignal_dc_dc_sta1_ihs_lim_max *m_dc_dc_sta1_ihs_lim_max;
    QVariantSignal_dc_dc_sta6_ind_temp4 *m_dc_dc_sta6_ind_temp4;
    QVariantSignal_data_07 *m_data_07;
    QVariantSignal_dc_dc_ctrl1_main_sp *m_dc_dc_ctrl1_main_sp;
    QVariantSignal_dc_dc_sta1_uhs_lim_max *m_dc_dc_sta1_uhs_lim_max;
    QVariantSignal_dc_dc_sta6_pcb_temp1 *m_dc_dc_sta6_pcb_temp1;
    QVariantSignal_data_06 *m_data_06;
    QVariantSignal_dc_dc_sta1_uhs_lim_min *m_dc_dc_sta1_uhs_lim_min;
    QVariantSignal_dc_dc_sta6_ind_temp2 *m_dc_dc_sta6_ind_temp2;
    QVariantSignal_data2 *m_data2;
    QVariantSignal_dc_dc4_warn_word4 *m_dc_dc4_warn_word4;
    QVariantSignal_dc_dc_sta6_ind_temp1 *m_dc_dc_sta6_ind_temp1;
    QVariantSignal_dc_dc4_warn_word3 *m_dc_dc4_warn_word3;
    QVariantSignal_data_03 *m_data_03;
    QVariantSignal_dc_dc4_warn_word2 *m_dc_dc4_warn_word2;
    QVariantSignal_dc_dc_sta5_uhs_est_act *m_dc_dc_sta5_uhs_est_act;
    QVariantSignal_dc_dc4_warn_word1 *m_dc_dc4_warn_word1;
    QVariantSignal_data_02 *m_data_02;
    QVariantSignal_dc_dc_sta5_trafo_temp1 *m_dc_dc_sta5_trafo_temp1;
    QVariantSignal_dc_dc3_err_word4 *m_dc_dc3_err_word4;
    QVariantSignal_dc_dc_sta5_trafo_temp4 *m_dc_dc_sta5_trafo_temp4;
    QVariantSignal_dc_dc_sta5_trafo_temp2 *m_dc_dc_sta5_trafo_temp2;
    QVariantSignal_dc_dc3_err_word3 *m_dc_dc3_err_word3;
    QVariantSignal_dc_dc_sta1_cur_avlbl *m_dc_dc_sta1_cur_avlbl;
    QVariantSignal_dc_dc_sta5_uls_est_act *m_dc_dc_sta5_uls_est_act;
    QVariantSignal_dc_dc3_err_word2 *m_dc_dc3_err_word2;
    QVariantSignal_data_01 *m_data_01;
    QVariantSignal_dc_dc_ctrl2_uls_min *m_dc_dc_ctrl2_uls_min;
    QVariantSignal_dc_dc3_err_word1 *m_dc_dc3_err_word1;
    QVariantSignal_dc_dc_ctrl2_ils_max *m_dc_dc_ctrl2_ils_max;
    QVariantSignal_dc_dc_sta3_warn_wrd2 *m_dc_dc_sta3_warn_wrd2;
    QVariantSignal_dc_dc_sta3_warn_wrd1 *m_dc_dc_sta3_warn_wrd1;
    QVariantSignal_data6 *m_data6;
    QVariantSignal_dc_dc_sta6_pcb_temp4 *m_dc_dc_sta6_pcb_temp4;
    QVariantSignal_dc_dc2_max_avlb_pwr *m_dc_dc2_max_avlb_pwr;
    QVariantSignal_dcdc_ctrl1_span4 *m_dcdc_ctrl1_span4;
    QVariantSignal_dc_dc_sta3_err_wrd2 *m_dc_dc_sta3_err_wrd2;
    QVariantSignal_dc_dc2_spare1 *m_dc_dc2_spare1;
    QVariantSignal_dcdc_ctrl1_span3 *m_dcdc_ctrl1_span3;
    QVariantSignal_dc_dc_sta3_err_wrd1 *m_dc_dc_sta3_err_wrd1;
    QVariantSignal_dc_dc2_max_avlb_current *m_dc_dc2_max_avlb_current;
    QVariantSignal_dc_dc_sta2_uhs_act *m_dc_dc_sta2_uhs_act;
    QVariantSignal_dc_dc_sta1_run *m_dc_dc_sta1_run;
    QVariantSignal_dc_dc_sta1_uls_lim_max *m_dc_dc_sta1_uls_lim_max;
    QVariantSignal_dc_dc2_pwr_unit_temp *m_dc_dc2_pwr_unit_temp;
    QVariantSignal_dc_dc_sta5_trafo_temp3 *m_dc_dc_sta5_trafo_temp3;
    QVariantSignal_dc_dc_ctrl2_uls_max *m_dc_dc_ctrl2_uls_max;
    QVariantSignal_dc_dc_sta2_uls_act *m_dc_dc_sta2_uls_act;
    QVariantSignal_rx_sdo_power_current_mode *m_rx_sdo_power_current_mode;
    QVariantSignal_dc_dc_ctrl2_ils_min *m_dc_dc_ctrl2_ils_min;
    QVariantSignal_dcdc_ctrl1_span2 *m_dcdc_ctrl1_span2;
    QVariantSignal_dc_dc_sta2_ihs_act *m_dc_dc_sta2_ihs_act;
    QVariantSignal_dc_dc1_spare3 *m_dc_dc1_spare3;
    QVariantSignal_dc_dc_ctrl1_on *m_dc_dc_ctrl1_on;
    QVariantSignal_dc_dc_sta2_ils_act *m_dc_dc_sta2_ils_act;
    QVariantSignal_data_04 *m_data_04;
    QVariantSignal_dc_dc1_power_act *m_dc_dc1_power_act;
    QVariantSignal_dc_dc_ctrl1_rele_in *m_dc_dc_ctrl1_rele_in;
    QVariantSignal_dc_dc1_status_word1 *m_dc_dc1_status_word1;
    QVariantSignal_dc_dc_sta1_hs_pre_charge_fbk *m_dc_dc_sta1_hs_pre_charge_fbk;
    QVariantSignal_data0 *m_data0;
    QVariantSignal_dc_dc_sta1_spare2 *m_dc_dc_sta1_spare2;
    QVariantSignal_data_05 *m_data_05;
    QVariantSignal_dc_dc1_status *m_dc_dc1_status;
    QVariantSignal_dc_dc_sta1_spare4 *m_dc_dc_sta1_spare4;
    QVariantSignal_data5 *m_data5;
    QVariantSignal_dc_dc_sta1_rele_1_fbk *m_dc_dc_sta1_rele_1_fbk;
    QVariantSignal_dc_dc_sta1_ls_pre_charge_fbk *m_dc_dc_sta1_ls_pre_charge_fbk;
    QVariantSignal_dc_dc1_spare1 *m_dc_dc1_spare1;
    QVariantSignal_dcdc_reset *m_dcdc_reset;
    QVariantSignal_dc_dc_sta1_rele_2_fbk *m_dc_dc_sta1_rele_2_fbk;
    QVariantSignal_rx_pdo1_maintenance_cmd *m_rx_pdo1_maintenance_cmd;
    QVariantSignal_dc_dc1_failure *m_dc_dc1_failure;
    QVariantSignal_dc_dc_sta1_t_pow_unit *m_dc_dc_sta1_t_pow_unit;
    QVariantSignal_data1 *m_data1;
    QVariantSignal_dc_dc_sta1_fan_act *m_dc_dc_sta1_fan_act;
    QVariantSignal_dc_dc_sta1_rele_3_fbk *m_dc_dc_sta1_rele_3_fbk;
    QVariantSignal_dc_dc1_running *m_dc_dc1_running;
    QVariantSignal_dc_dc_sta1_ils_lim_max *m_dc_dc_sta1_ils_lim_max;
    QVariantSignal_dc_dc_sta1_rol_cnt *m_dc_dc_sta1_rol_cnt;
    QVariantSignal_dc_dc_ctrl3_uhs_max *m_dc_dc_ctrl3_uhs_max;
    QVariantSignal_rx_pdo1_spare1 *m_rx_pdo1_spare1;
    QVariantSignal_dc_dc_sta1_ils_lim_min_b *m_dc_dc_sta1_ils_lim_min_b;
    QVariantSignal_tx_sdo_power_current_mode *m_tx_sdo_power_current_mode;
    QVariantSignal_dc_dc_sta1_ils_lim_max_b *m_dc_dc_sta1_ils_lim_max_b;
    QVariantSignal_dc_dc_sta1_spare3 *m_dc_dc_sta1_spare3;
    QVariantSignal_dc_dc_sta1_err_b *m_dc_dc_sta1_err_b;
    QVariantSignal_tx_pdo1_pc_spare3 *m_tx_pdo1_pc_spare3;
    QVariantSignal_rx_pdo1_system_off_request *m_rx_pdo1_system_off_request;
    QVariantSignal_dc_dc_ctrl3_ihs_min *m_dc_dc_ctrl3_ihs_min;
    QVariantSignal_dc_dc_sta1_uhs_lim_max_b *m_dc_dc_sta1_uhs_lim_max_b;
    QVariantSignal_tx_pdo1_pc_spare2 *m_tx_pdo1_pc_spare2;
    QVariantSignal_rx_pdo1_fast_shutdown_request *m_rx_pdo1_fast_shutdown_request;
    QVariantSignal_dc_dc_ctrl3_ihs_max *m_dc_dc_ctrl3_ihs_max;
    QVariantSignal_dc_dc_sta1_uhs_lim_min_b *m_dc_dc_sta1_uhs_lim_min_b;
    QVariantSignal_tx_pdo1_pc_spare1 *m_tx_pdo1_pc_spare1;
    QVariantSignal_rx_pdo1_power_current_max *m_rx_pdo1_power_current_max;
    QVariantSignal_data4 *m_data4;
    QVariantSignal_dcxc_connection_state *m_dcxc_connection_state;
    QVariantSignal_dc_dc_sta1_err *m_dc_dc_sta1_err;
    QVariantSignal_dc_dc_ctrl1_rele_out *m_dc_dc_ctrl1_rele_out;
    QVariantSignal_dc_dc_sta1_warn *m_dc_dc_sta1_warn;
    QVariantSignal_dc_dc_sta1_ihs_lim_min_b *m_dc_dc_sta1_ihs_lim_min_b;
    QVariantSignal_data3 *m_data3;
    QVariantSignal_dcdc_ctrl1_span1 *m_dcdc_ctrl1_span1;
    QVariantSignal_dc_dc_sta1_rdy *m_dc_dc_sta1_rdy;
    QVariantSignal_dc_dc_ctrl1_fault_ack *m_dc_dc_ctrl1_fault_ack;
    QVariantSignal_data7 *m_data7;

};

class cantoolsQtMessage_dc_dc_sta6 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta6_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta6_ind_temp4;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp4->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp4->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp4=" << cantools.m_dc_dc_sta6_ind_temp4->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp1;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp1->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp1=" << cantools.m_dc_dc_sta6_pcb_temp1->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp3;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp3->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp3=" << cantools.m_dc_dc_sta6_pcb_temp3->m_val;
        }

        x = store.dc_dc_sta6_ind_temp2;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp2->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp2=" << cantools.m_dc_dc_sta6_ind_temp2->m_val;
        }

        x = store.dc_dc_sta6_ind_temp1;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp1->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp1=" << cantools.m_dc_dc_sta6_ind_temp1->m_val;
        }

        x = store.dc_dc_sta6_ind_temp3;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp3->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp3=" << cantools.m_dc_dc_sta6_ind_temp3->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp4;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp4->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp4->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp4=" << cantools.m_dc_dc_sta6_pcb_temp4->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp2;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp2->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp2=" << cantools.m_dc_dc_sta6_pcb_temp2->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta6_t store={};
    const QString m_name = "dc_dc_sta6";
};

class cantoolsQtMessage_dc_dc_sta6b : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta6b_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta6_ind_temp2_b;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp2_b->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp2_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp2_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp2_b=" << cantools.m_dc_dc_sta6_ind_temp2_b->m_val;
        }

        x = store.dc_dc_sta6_ind_temp3_b;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp3_b->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp3_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp3_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp3_b=" << cantools.m_dc_dc_sta6_ind_temp3_b->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp4_b;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp4_b->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp4_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp4_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp4_b=" << cantools.m_dc_dc_sta6_pcb_temp4_b->m_val;
        }

        x = store.dc_dc_sta6_ind_temp4_b;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp4_b->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp4_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp4_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp4_b=" << cantools.m_dc_dc_sta6_ind_temp4_b->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp2_b;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp2_b->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp2_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp2_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp2_b=" << cantools.m_dc_dc_sta6_pcb_temp2_b->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp1_b;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp1_b->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp1_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp1_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp1_b=" << cantools.m_dc_dc_sta6_pcb_temp1_b->m_val;
        }

        x = store.dc_dc_sta6_ind_temp1_b;
        if ((false) || (cantools.m_dc_dc_sta6_ind_temp1_b->m_val != x)) {
            cantools.m_dc_dc_sta6_ind_temp1_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_ind_temp1_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_ind_temp1_b=" << cantools.m_dc_dc_sta6_ind_temp1_b->m_val;
        }

        x = store.dc_dc_sta6_pcb_temp3_b;
        if ((false) || (cantools.m_dc_dc_sta6_pcb_temp3_b->m_val != x)) {
            cantools.m_dc_dc_sta6_pcb_temp3_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta6_pcb_temp3_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta6_pcb_temp3_b=" << cantools.m_dc_dc_sta6_pcb_temp3_b->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta6b_t store={};
    const QString m_name = "dc_dc_sta6b";
};

class cantoolsQtMessage_dc_dc4 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc4_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc4_warn_word1;
        if ((false) || (cantools.m_dc_dc4_warn_word1->m_val != x)) {
            cantools.m_dc_dc4_warn_word1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc4_warn_word1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc4_warn_word1=" << cantools.m_dc_dc4_warn_word1->m_val;
        }

        x = store.dc_dc4_warn_word2;
        if ((false) || (cantools.m_dc_dc4_warn_word2->m_val != x)) {
            cantools.m_dc_dc4_warn_word2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc4_warn_word2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc4_warn_word2=" << cantools.m_dc_dc4_warn_word2->m_val;
        }

        x = store.dc_dc4_warn_word3;
        if ((false) || (cantools.m_dc_dc4_warn_word3->m_val != x)) {
            cantools.m_dc_dc4_warn_word3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc4_warn_word3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc4_warn_word3=" << cantools.m_dc_dc4_warn_word3->m_val;
        }

        x = store.dc_dc4_warn_word4;
        if ((false) || (cantools.m_dc_dc4_warn_word4->m_val != x)) {
            cantools.m_dc_dc4_warn_word4->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc4_warn_word4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc4_warn_word4=" << cantools.m_dc_dc4_warn_word4->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc4_t store={};
    const QString m_name = "dc_dc4";
};

class cantoolsQtMessage_iso_tp_response_vms : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_iso_tp_response_vms_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.data_03;
        if ((false) || (cantools.m_data_03->m_val != x)) {
            cantools.m_data_03->m_val = x;
            if (!false) {
                emit cantools.m_data_03->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_03=" << cantools.m_data_03->m_val;
        }

        x = store.data_01;
        if ((false) || (cantools.m_data_01->m_val != x)) {
            cantools.m_data_01->m_val = x;
            if (!false) {
                emit cantools.m_data_01->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_01=" << cantools.m_data_01->m_val;
        }

        x = store.data_04;
        if ((false) || (cantools.m_data_04->m_val != x)) {
            cantools.m_data_04->m_val = x;
            if (!false) {
                emit cantools.m_data_04->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_04=" << cantools.m_data_04->m_val;
        }

        x = store.data_08;
        if ((false) || (cantools.m_data_08->m_val != x)) {
            cantools.m_data_08->m_val = x;
            if (!false) {
                emit cantools.m_data_08->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_08=" << cantools.m_data_08->m_val;
        }

        x = store.data_07;
        if ((false) || (cantools.m_data_07->m_val != x)) {
            cantools.m_data_07->m_val = x;
            if (!false) {
                emit cantools.m_data_07->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_07=" << cantools.m_data_07->m_val;
        }

        x = store.data_02;
        if ((false) || (cantools.m_data_02->m_val != x)) {
            cantools.m_data_02->m_val = x;
            if (!false) {
                emit cantools.m_data_02->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_02=" << cantools.m_data_02->m_val;
        }

        x = store.data_05;
        if ((false) || (cantools.m_data_05->m_val != x)) {
            cantools.m_data_05->m_val = x;
            if (!false) {
                emit cantools.m_data_05->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_05=" << cantools.m_data_05->m_val;
        }

        x = store.data_06;
        if ((false) || (cantools.m_data_06->m_val != x)) {
            cantools.m_data_06->m_val = x;
            if (!false) {
                emit cantools.m_data_06->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data_06=" << cantools.m_data_06->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_iso_tp_response_vms_t store={};
    const QString m_name = "iso_tp_response_vms";
};

class cantoolsQtMessage_dc_dc3 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc3_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc3_err_word2;
        if ((false) || (cantools.m_dc_dc3_err_word2->m_val != x)) {
            cantools.m_dc_dc3_err_word2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc3_err_word2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc3_err_word2=" << cantools.m_dc_dc3_err_word2->m_val;
        }

        x = store.dc_dc3_err_word3;
        if ((false) || (cantools.m_dc_dc3_err_word3->m_val != x)) {
            cantools.m_dc_dc3_err_word3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc3_err_word3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc3_err_word3=" << cantools.m_dc_dc3_err_word3->m_val;
        }

        x = store.dc_dc3_err_word4;
        if ((false) || (cantools.m_dc_dc3_err_word4->m_val != x)) {
            cantools.m_dc_dc3_err_word4->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc3_err_word4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc3_err_word4=" << cantools.m_dc_dc3_err_word4->m_val;
        }

        x = store.dc_dc3_err_word1;
        if ((false) || (cantools.m_dc_dc3_err_word1->m_val != x)) {
            cantools.m_dc_dc3_err_word1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc3_err_word1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc3_err_word1=" << cantools.m_dc_dc3_err_word1->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc3_t store={};
    const QString m_name = "dc_dc3";
};

class cantoolsQtMessage_iso_tp_request : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_iso_tp_request_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.data4;
        if ((false) || (cantools.m_data4->m_val != x)) {
            cantools.m_data4->m_val = x;
            if (!false) {
                emit cantools.m_data4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data4=" << cantools.m_data4->m_val;
        }

        x = store.data0;
        if ((false) || (cantools.m_data0->m_val != x)) {
            cantools.m_data0->m_val = x;
            if (!false) {
                emit cantools.m_data0->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data0=" << cantools.m_data0->m_val;
        }

        x = store.data6;
        if ((false) || (cantools.m_data6->m_val != x)) {
            cantools.m_data6->m_val = x;
            if (!false) {
                emit cantools.m_data6->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data6=" << cantools.m_data6->m_val;
        }

        x = store.data5;
        if ((false) || (cantools.m_data5->m_val != x)) {
            cantools.m_data5->m_val = x;
            if (!false) {
                emit cantools.m_data5->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data5=" << cantools.m_data5->m_val;
        }

        x = store.data3;
        if ((false) || (cantools.m_data3->m_val != x)) {
            cantools.m_data3->m_val = x;
            if (!false) {
                emit cantools.m_data3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data3=" << cantools.m_data3->m_val;
        }

        x = store.data2;
        if ((false) || (cantools.m_data2->m_val != x)) {
            cantools.m_data2->m_val = x;
            if (!false) {
                emit cantools.m_data2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data2=" << cantools.m_data2->m_val;
        }

        x = store.data7;
        if ((false) || (cantools.m_data7->m_val != x)) {
            cantools.m_data7->m_val = x;
            if (!false) {
                emit cantools.m_data7->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data7=" << cantools.m_data7->m_val;
        }

        x = store.data1;
        if ((false) || (cantools.m_data1->m_val != x)) {
            cantools.m_data1->m_val = x;
            if (!false) {
                emit cantools.m_data1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_data1=" << cantools.m_data1->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_iso_tp_request_t store={};
    const QString m_name = "iso_tp_request";
};

class cantoolsQtMessage_tx_sdo2 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_sdo2_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_sdo_power_current_reference;
        if ((false) || (cantools.m_tx_sdo_power_current_reference->m_val != x)) {
            cantools.m_tx_sdo_power_current_reference->m_val = x;
            if (!false) {
                emit cantools.m_tx_sdo_power_current_reference->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_sdo_power_current_reference=" << cantools.m_tx_sdo_power_current_reference->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_sdo2_t store={};
    const QString m_name = "tx_sdo2";
};

class cantoolsQtMessage_tx_pdo1_vn1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_pdo1_vn1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_pdo1_vn1_spare2;
        if ((false) || (cantools.m_tx_pdo1_vn1_spare2->m_val != x)) {
            cantools.m_tx_pdo1_vn1_spare2->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_vn1_spare2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_vn1_spare2=" << cantools.m_tx_pdo1_vn1_spare2->m_val;
        }

        x = store.tcm_hs_sec_in_sp;
        if ((false) || (cantools.m_tcm_hs_sec_in_sp->m_val != x)) {
            cantools.m_tcm_hs_sec_in_sp->m_val = x;
            if (!false) {
                emit cantools.m_tcm_hs_sec_in_sp->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tcm_hs_sec_in_sp=" << cantools.m_tcm_hs_sec_in_sp->m_val;
        }

        x = store.tcm_hs_pri_out;
        if ((false) || (cantools.m_tcm_hs_pri_out->m_val != x)) {
            cantools.m_tcm_hs_pri_out->m_val = x;
            if (!false) {
                emit cantools.m_tcm_hs_pri_out->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tcm_hs_pri_out=" << cantools.m_tcm_hs_pri_out->m_val;
        }

        x = store.tx_pdo1_vn1_spare1;
        if ((false) || (cantools.m_tx_pdo1_vn1_spare1->m_val != x)) {
            cantools.m_tx_pdo1_vn1_spare1->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_vn1_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_vn1_spare1=" << cantools.m_tx_pdo1_vn1_spare1->m_val;
        }

        x = store.pos_mix_valve;
        if ((false) || (cantools.m_pos_mix_valve->m_val != x)) {
            cantools.m_pos_mix_valve->m_val = x;
            if (!false) {
                emit cantools.m_pos_mix_valve->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_pos_mix_valve=" << cantools.m_pos_mix_valve->m_val;
        }

        x = store.mute_h2_sens_exhaust;
        if ((false) || (cantools.m_mute_h2_sens_exhaust->m_val != x)) {
            cantools.m_mute_h2_sens_exhaust->m_val = x;
            if (!false) {
                emit cantools.m_mute_h2_sens_exhaust->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_mute_h2_sens_exhaust=" << cantools.m_mute_h2_sens_exhaust->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_pdo1_vn1_t store={};
    const QString m_name = "tx_pdo1_vn1";
};

class cantoolsQtMessage_dc_dc_sta5 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta5_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta5_uhs_est_act;
        if ((false) || (cantools.m_dc_dc_sta5_uhs_est_act->m_val != x)) {
            cantools.m_dc_dc_sta5_uhs_est_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_uhs_est_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_uhs_est_act=" << cantools.m_dc_dc_sta5_uhs_est_act->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp3;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp3->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp3=" << cantools.m_dc_dc_sta5_trafo_temp3->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp1;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp1->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp1=" << cantools.m_dc_dc_sta5_trafo_temp1->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp4;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp4->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp4->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp4=" << cantools.m_dc_dc_sta5_trafo_temp4->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp2;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp2->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp2=" << cantools.m_dc_dc_sta5_trafo_temp2->m_val;
        }

        x = store.dc_dc_sta5_uls_est_act;
        if ((false) || (cantools.m_dc_dc_sta5_uls_est_act->m_val != x)) {
            cantools.m_dc_dc_sta5_uls_est_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_uls_est_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_uls_est_act=" << cantools.m_dc_dc_sta5_uls_est_act->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta5_t store={};
    const QString m_name = "dc_dc_sta5";
};

class cantoolsQtMessage_rx_sdo3 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_rx_sdo3_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.rx_sdo_power_current_min_handling;
        if ((false) || (cantools.m_rx_sdo_power_current_min_handling->m_val != x)) {
            cantools.m_rx_sdo_power_current_min_handling->m_val = x;
            if (!false) {
                emit cantools.m_rx_sdo_power_current_min_handling->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_sdo_power_current_min_handling=" << cantools.m_rx_sdo_power_current_min_handling->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_rx_sdo3_t store={};
    const QString m_name = "rx_sdo3";
};

class cantoolsQtMessage_dc_dc_ctrl3 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_ctrl3_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_ctrl3_ihs_max;
        if ((false) || (cantools.m_dc_dc_ctrl3_ihs_max->m_val != x)) {
            cantools.m_dc_dc_ctrl3_ihs_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl3_ihs_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl3_ihs_max=" << cantools.m_dc_dc_ctrl3_ihs_max->m_val;
        }

        x = store.dc_dc_ctrl3_ihs_min;
        if ((false) || (cantools.m_dc_dc_ctrl3_ihs_min->m_val != x)) {
            cantools.m_dc_dc_ctrl3_ihs_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl3_ihs_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl3_ihs_min=" << cantools.m_dc_dc_ctrl3_ihs_min->m_val;
        }

        x = store.dc_dc_ctrl3_uhs_min;
        if ((false) || (cantools.m_dc_dc_ctrl3_uhs_min->m_val != x)) {
            cantools.m_dc_dc_ctrl3_uhs_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl3_uhs_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl3_uhs_min=" << cantools.m_dc_dc_ctrl3_uhs_min->m_val;
        }

        x = store.dc_dc_ctrl3_uhs_max;
        if ((false) || (cantools.m_dc_dc_ctrl3_uhs_max->m_val != x)) {
            cantools.m_dc_dc_ctrl3_uhs_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl3_uhs_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl3_uhs_max=" << cantools.m_dc_dc_ctrl3_uhs_max->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_ctrl3_t store={};
    const QString m_name = "dc_dc_ctrl3";
};

class cantoolsQtMessage_tx_sdo1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_sdo1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_sdo_power_current_mode;
        if ((false) || (cantools.m_tx_sdo_power_current_mode->m_val != x)) {
            cantools.m_tx_sdo_power_current_mode->m_val = x;
            if (!false) {
                emit cantools.m_tx_sdo_power_current_mode->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_sdo_power_current_mode=" << cantools.m_tx_sdo_power_current_mode->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_sdo1_t store={};
    const QString m_name = "tx_sdo1";
};

class cantoolsQtMessage_dc_dc_sta2b : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta2b_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta2_uls_act_b;
        if ((false) || (cantools.m_dc_dc_sta2_uls_act_b->m_val != x)) {
            cantools.m_dc_dc_sta2_uls_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_uls_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_uls_act_b=" << cantools.m_dc_dc_sta2_uls_act_b->m_val;
        }

        x = store.dc_dc_sta2_uhs_act_b;
        if ((false) || (cantools.m_dc_dc_sta2_uhs_act_b->m_val != x)) {
            cantools.m_dc_dc_sta2_uhs_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_uhs_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_uhs_act_b=" << cantools.m_dc_dc_sta2_uhs_act_b->m_val;
        }

        x = store.dc_dc_sta2_ils_act_b;
        if ((false) || (cantools.m_dc_dc_sta2_ils_act_b->m_val != x)) {
            cantools.m_dc_dc_sta2_ils_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_ils_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_ils_act_b=" << cantools.m_dc_dc_sta2_ils_act_b->m_val;
        }

        x = store.dc_dc_sta2_ihs_act_b;
        if ((false) || (cantools.m_dc_dc_sta2_ihs_act_b->m_val != x)) {
            cantools.m_dc_dc_sta2_ihs_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_ihs_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_ihs_act_b=" << cantools.m_dc_dc_sta2_ihs_act_b->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta2b_t store={};
    const QString m_name = "dc_dc_sta2b";
};

class cantoolsQtMessage_tx_sdo3 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_sdo3_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_sdo_power_current_min_handling;
        if ((false) || (cantools.m_tx_sdo_power_current_min_handling->m_val != x)) {
            cantools.m_tx_sdo_power_current_min_handling->m_val = x;
            if (!false) {
                emit cantools.m_tx_sdo_power_current_min_handling->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_sdo_power_current_min_handling=" << cantools.m_tx_sdo_power_current_min_handling->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_sdo3_t store={};
    const QString m_name = "tx_sdo3";
};

class cantoolsQtMessage_rx_pdo1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_rx_pdo1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.rx_pdo1_fast_shutdown_request;
        if ((false) || (cantools.m_rx_pdo1_fast_shutdown_request->m_val != x)) {
            cantools.m_rx_pdo1_fast_shutdown_request->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_fast_shutdown_request->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_fast_shutdown_request=" << cantools.m_rx_pdo1_fast_shutdown_request->m_val;
        }

        x = store.rx_pdo1_spare3;
        if ((false) || (cantools.m_rx_pdo1_spare3->m_val != x)) {
            cantools.m_rx_pdo1_spare3->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_spare3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_spare3=" << cantools.m_rx_pdo1_spare3->m_val;
        }

        x = store.rx_pdo1_power_current_max;
        if ((false) || (cantools.m_rx_pdo1_power_current_max->m_val != x)) {
            cantools.m_rx_pdo1_power_current_max->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_power_current_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_power_current_max=" << cantools.m_rx_pdo1_power_current_max->m_val;
        }

        x = store.rx_pdo1_freeze_protectio_request;
        if ((false) || (cantools.m_rx_pdo1_freeze_protectio_request->m_val != x)) {
            cantools.m_rx_pdo1_freeze_protectio_request->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_freeze_protectio_request->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_freeze_protectio_request=" << cantools.m_rx_pdo1_freeze_protectio_request->m_val;
        }

        x = store.rx_pdo1_spare1;
        if ((false) || (cantools.m_rx_pdo1_spare1->m_val != x)) {
            cantools.m_rx_pdo1_spare1->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_spare1=" << cantools.m_rx_pdo1_spare1->m_val;
        }

        x = store.rx_pdo1_spare2;
        if ((false) || (cantools.m_rx_pdo1_spare2->m_val != x)) {
            cantools.m_rx_pdo1_spare2->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_spare2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_spare2=" << cantools.m_rx_pdo1_spare2->m_val;
        }

        x = store.dcdc_reset;
        if ((false) || (cantools.m_dcdc_reset->m_val != x)) {
            cantools.m_dcdc_reset->m_val = x;
            if (!false) {
                emit cantools.m_dcdc_reset->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcdc_reset=" << cantools.m_dcdc_reset->m_val;
        }

        x = store.rx_pdo1_maintenance_cmd;
        if ((false) || (cantools.m_rx_pdo1_maintenance_cmd->m_val != x)) {
            cantools.m_rx_pdo1_maintenance_cmd->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_maintenance_cmd->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_maintenance_cmd=" << cantools.m_rx_pdo1_maintenance_cmd->m_val;
        }

        x = store.rx_pdo1_system_off_request;
        if ((false) || (cantools.m_rx_pdo1_system_off_request->m_val != x)) {
            cantools.m_rx_pdo1_system_off_request->m_val = x;
            if (!false) {
                emit cantools.m_rx_pdo1_system_off_request->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_pdo1_system_off_request=" << cantools.m_rx_pdo1_system_off_request->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_rx_pdo1_t store={};
    const QString m_name = "rx_pdo1";
};

class cantoolsQtMessage_rx_sdo2 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_rx_sdo2_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.rx_sdo_power_current_reference;
        if ((false) || (cantools.m_rx_sdo_power_current_reference->m_val != x)) {
            cantools.m_rx_sdo_power_current_reference->m_val = x;
            if (!false) {
                emit cantools.m_rx_sdo_power_current_reference->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_sdo_power_current_reference=" << cantools.m_rx_sdo_power_current_reference->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_rx_sdo2_t store={};
    const QString m_name = "rx_sdo2";
};

class cantoolsQtMessage_tx_pdo3 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_pdo3_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_pdo3_power_current_act;
        if ((false) || (cantools.m_tx_pdo3_power_current_act->m_val != x)) {
            cantools.m_tx_pdo3_power_current_act->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo3_power_current_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo3_power_current_act=" << cantools.m_tx_pdo3_power_current_act->m_val;
        }

        x = store.tx_pdo3_power_current_peripheral;
        if ((false) || (cantools.m_tx_pdo3_power_current_peripheral->m_val != x)) {
            cantools.m_tx_pdo3_power_current_peripheral->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo3_power_current_peripheral->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo3_power_current_peripheral=" << cantools.m_tx_pdo3_power_current_peripheral->m_val;
        }

        x = store.tx_pdo3_power_current_opt;
        if ((false) || (cantools.m_tx_pdo3_power_current_opt->m_val != x)) {
            cantools.m_tx_pdo3_power_current_opt->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo3_power_current_opt->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo3_power_current_opt=" << cantools.m_tx_pdo3_power_current_opt->m_val;
        }

        x = store.tx_pdo3_spare1;
        if ((false) || (cantools.m_tx_pdo3_spare1->m_val != x)) {
            cantools.m_tx_pdo3_spare1->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo3_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo3_spare1=" << cantools.m_tx_pdo3_spare1->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_pdo3_t store={};
    const QString m_name = "tx_pdo3";
};

class cantoolsQtMessage_dc_dc1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc1_running;
        if ((false) || (cantools.m_dc_dc1_running->m_val != x)) {
            cantools.m_dc_dc1_running->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_running->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_running=" << cantools.m_dc_dc1_running->m_val;
        }

        x = store.dc_dc1_power_act;
        if ((false) || (cantools.m_dc_dc1_power_act->m_val != x)) {
            cantools.m_dc_dc1_power_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_power_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_power_act=" << cantools.m_dc_dc1_power_act->m_val;
        }

        x = store.dc_dc1_status_word1;
        if ((false) || (cantools.m_dc_dc1_status_word1->m_val != x)) {
            cantools.m_dc_dc1_status_word1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_status_word1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_status_word1=" << cantools.m_dc_dc1_status_word1->m_val;
        }

        x = store.dc_dc1_status;
        if ((false) || (cantools.m_dc_dc1_status->m_val != x)) {
            cantools.m_dc_dc1_status->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_status->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_status=" << cantools.m_dc_dc1_status->m_val;
        }

        x = store.dc_dc1_spare1;
        if ((false) || (cantools.m_dc_dc1_spare1->m_val != x)) {
            cantools.m_dc_dc1_spare1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_spare1=" << cantools.m_dc_dc1_spare1->m_val;
        }

        x = store.dc_dc1_failure;
        if ((false) || (cantools.m_dc_dc1_failure->m_val != x)) {
            cantools.m_dc_dc1_failure->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_failure->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_failure=" << cantools.m_dc_dc1_failure->m_val;
        }

        x = store.dc_dc1_spare3;
        if ((false) || (cantools.m_dc_dc1_spare3->m_val != x)) {
            cantools.m_dc_dc1_spare3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc1_spare3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc1_spare3=" << cantools.m_dc_dc1_spare3->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc1_t store={};
    const QString m_name = "dc_dc1";
};

class cantoolsQtMessage_dc_dc_sta3 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta3_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta3_err_wrd1;
        if ((false) || (cantools.m_dc_dc_sta3_err_wrd1->m_val != x)) {
            cantools.m_dc_dc_sta3_err_wrd1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_err_wrd1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_err_wrd1=" << cantools.m_dc_dc_sta3_err_wrd1->m_val;
        }

        x = store.dc_dc_sta3_err_wrd2;
        if ((false) || (cantools.m_dc_dc_sta3_err_wrd2->m_val != x)) {
            cantools.m_dc_dc_sta3_err_wrd2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_err_wrd2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_err_wrd2=" << cantools.m_dc_dc_sta3_err_wrd2->m_val;
        }

        x = store.dc_dc_sta3_warn_wrd1;
        if ((false) || (cantools.m_dc_dc_sta3_warn_wrd1->m_val != x)) {
            cantools.m_dc_dc_sta3_warn_wrd1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_warn_wrd1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_warn_wrd1=" << cantools.m_dc_dc_sta3_warn_wrd1->m_val;
        }

        x = store.dc_dc_sta3_warn_wrd2;
        if ((false) || (cantools.m_dc_dc_sta3_warn_wrd2->m_val != x)) {
            cantools.m_dc_dc_sta3_warn_wrd2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_warn_wrd2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_warn_wrd2=" << cantools.m_dc_dc_sta3_warn_wrd2->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta3_t store={};
    const QString m_name = "dc_dc_sta3";
};

class cantoolsQtMessage_tx_pdo2 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_pdo2_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_pdo2_extended_info_b;
        if ((false) || (cantools.m_tx_pdo2_extended_info_b->m_val != x)) {
            cantools.m_tx_pdo2_extended_info_b->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo2_extended_info_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo2_extended_info_b=" << cantools.m_tx_pdo2_extended_info_b->m_val;
        }

        x = store.tx_pdo2_event_code_a;
        if ((false) || (cantools.m_tx_pdo2_event_code_a->m_val != x)) {
            cantools.m_tx_pdo2_event_code_a->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo2_event_code_a->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo2_event_code_a=" << cantools.m_tx_pdo2_event_code_a->m_val;
        }

        x = store.tx_pdo2_event_code_b;
        if ((false) || (cantools.m_tx_pdo2_event_code_b->m_val != x)) {
            cantools.m_tx_pdo2_event_code_b->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo2_event_code_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo2_event_code_b=" << cantools.m_tx_pdo2_event_code_b->m_val;
        }

        x = store.tx_pdo2_extended_info_a;
        if ((false) || (cantools.m_tx_pdo2_extended_info_a->m_val != x)) {
            cantools.m_tx_pdo2_extended_info_a->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo2_extended_info_a->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo2_extended_info_a=" << cantools.m_tx_pdo2_extended_info_a->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_pdo2_t store={};
    const QString m_name = "tx_pdo2";
};

class cantoolsQtMessage_dc_dc2 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc2_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc2_spare1;
        if ((false) || (cantools.m_dc_dc2_spare1->m_val != x)) {
            cantools.m_dc_dc2_spare1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc2_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc2_spare1=" << cantools.m_dc_dc2_spare1->m_val;
        }

        x = store.dc_dc2_max_avlb_pwr;
        if ((false) || (cantools.m_dc_dc2_max_avlb_pwr->m_val != x)) {
            cantools.m_dc_dc2_max_avlb_pwr->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc2_max_avlb_pwr->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc2_max_avlb_pwr=" << cantools.m_dc_dc2_max_avlb_pwr->m_val;
        }

        x = store.dc_dc2_pwr_unit_temp;
        if ((false) || (cantools.m_dc_dc2_pwr_unit_temp->m_val != x)) {
            cantools.m_dc_dc2_pwr_unit_temp->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc2_pwr_unit_temp->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc2_pwr_unit_temp=" << cantools.m_dc_dc2_pwr_unit_temp->m_val;
        }

        x = store.dc_dc2_max_avlb_current;
        if ((false) || (cantools.m_dc_dc2_max_avlb_current->m_val != x)) {
            cantools.m_dc_dc2_max_avlb_current->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc2_max_avlb_current->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc2_max_avlb_current=" << cantools.m_dc_dc2_max_avlb_current->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc2_t store={};
    const QString m_name = "dc_dc2";
};

class cantoolsQtMessage_dc_dc_ctrl2 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_ctrl2_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_ctrl2_ils_min;
        if ((false) || (cantools.m_dc_dc_ctrl2_ils_min->m_val != x)) {
            cantools.m_dc_dc_ctrl2_ils_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl2_ils_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl2_ils_min=" << cantools.m_dc_dc_ctrl2_ils_min->m_val;
        }

        x = store.dc_dc_ctrl2_uls_max;
        if ((false) || (cantools.m_dc_dc_ctrl2_uls_max->m_val != x)) {
            cantools.m_dc_dc_ctrl2_uls_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl2_uls_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl2_uls_max=" << cantools.m_dc_dc_ctrl2_uls_max->m_val;
        }

        x = store.dc_dc_ctrl2_uls_min;
        if ((false) || (cantools.m_dc_dc_ctrl2_uls_min->m_val != x)) {
            cantools.m_dc_dc_ctrl2_uls_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl2_uls_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl2_uls_min=" << cantools.m_dc_dc_ctrl2_uls_min->m_val;
        }

        x = store.dc_dc_ctrl2_ils_max;
        if ((false) || (cantools.m_dc_dc_ctrl2_ils_max->m_val != x)) {
            cantools.m_dc_dc_ctrl2_ils_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl2_ils_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl2_ils_max=" << cantools.m_dc_dc_ctrl2_ils_max->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_ctrl2_t store={};
    const QString m_name = "dc_dc_ctrl2";
};

class cantoolsQtMessage_rx_sdo1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_rx_sdo1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.rx_sdo_power_current_mode;
        if ((false) || (cantools.m_rx_sdo_power_current_mode->m_val != x)) {
            cantools.m_rx_sdo_power_current_mode->m_val = x;
            if (!false) {
                emit cantools.m_rx_sdo_power_current_mode->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_rx_sdo_power_current_mode=" << cantools.m_rx_sdo_power_current_mode->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_rx_sdo1_t store={};
    const QString m_name = "rx_sdo1";
};

class cantoolsQtMessage_tx_pdo1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_pdo1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_pdo1_system_state;
        if ((false) || (cantools.m_tx_pdo1_system_state->m_val != x)) {
            cantools.m_tx_pdo1_system_state->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_system_state->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_system_state=" << cantools.m_tx_pdo1_system_state->m_val;
        }

        x = store.tx_pdo1_system_sub_state;
        if ((false) || (cantools.m_tx_pdo1_system_sub_state->m_val != x)) {
            cantools.m_tx_pdo1_system_sub_state->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_system_sub_state->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_system_sub_state=" << cantools.m_tx_pdo1_system_sub_state->m_val;
        }

        x = store.tx_pdo1_status_freeze_protection;
        if ((false) || (cantools.m_tx_pdo1_status_freeze_protection->m_val != x)) {
            cantools.m_tx_pdo1_status_freeze_protection->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_status_freeze_protection->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_status_freeze_protection=" << cantools.m_tx_pdo1_status_freeze_protection->m_val;
        }

        x = store.tx_pdo1_spare1;
        if ((false) || (cantools.m_tx_pdo1_spare1->m_val != x)) {
            cantools.m_tx_pdo1_spare1->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_spare1=" << cantools.m_tx_pdo1_spare1->m_val;
        }

        x = store.tx_pdo1_spare2;
        if ((false) || (cantools.m_tx_pdo1_spare2->m_val != x)) {
            cantools.m_tx_pdo1_spare2->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_spare2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_spare2=" << cantools.m_tx_pdo1_spare2->m_val;
        }

        x = store.tx_pdo1_estimated_time_for_shutdown;
        if ((false) || (cantools.m_tx_pdo1_estimated_time_for_shutdown->m_val != x)) {
            cantools.m_tx_pdo1_estimated_time_for_shutdown->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_estimated_time_for_shutdown->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_estimated_time_for_shutdown=" << cantools.m_tx_pdo1_estimated_time_for_shutdown->m_val;
        }

        x = store.tx_pdo1_estimated_time_to_power;
        if ((false) || (cantools.m_tx_pdo1_estimated_time_to_power->m_val != x)) {
            cantools.m_tx_pdo1_estimated_time_to_power->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_estimated_time_to_power->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_estimated_time_to_power=" << cantools.m_tx_pdo1_estimated_time_to_power->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_pdo1_t store={};
    const QString m_name = "tx_pdo1";
};

class cantoolsQtMessage_tx_pdo4 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_pdo4_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_pdo4_power_current_min_state;
        if ((false) || (cantools.m_tx_pdo4_power_current_min_state->m_val != x)) {
            cantools.m_tx_pdo4_power_current_min_state->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo4_power_current_min_state->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo4_power_current_min_state=" << cantools.m_tx_pdo4_power_current_min_state->m_val;
        }

        x = store.tx_pdo4_power_current_min;
        if ((false) || (cantools.m_tx_pdo4_power_current_min->m_val != x)) {
            cantools.m_tx_pdo4_power_current_min->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo4_power_current_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo4_power_current_min=" << cantools.m_tx_pdo4_power_current_min->m_val;
        }

        x = store.tx_pdo4_power_current_max;
        if ((false) || (cantools.m_tx_pdo4_power_current_max->m_val != x)) {
            cantools.m_tx_pdo4_power_current_max->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo4_power_current_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo4_power_current_max=" << cantools.m_tx_pdo4_power_current_max->m_val;
        }

        x = store.tx_pdo4_power_current_max_state;
        if ((false) || (cantools.m_tx_pdo4_power_current_max_state->m_val != x)) {
            cantools.m_tx_pdo4_power_current_max_state->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo4_power_current_max_state->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo4_power_current_max_state=" << cantools.m_tx_pdo4_power_current_max_state->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_pdo4_t store={};
    const QString m_name = "tx_pdo4";
};

class cantoolsQtMessage_tx_pdo1_pc : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_tx_pdo1_pc_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.tx_pdo1_pc_spare1;
        if ((false) || (cantools.m_tx_pdo1_pc_spare1->m_val != x)) {
            cantools.m_tx_pdo1_pc_spare1->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_pc_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_pc_spare1=" << cantools.m_tx_pdo1_pc_spare1->m_val;
        }

        x = store.dcxc_connection_state;
        if ((false) || (cantools.m_dcxc_connection_state->m_val != x)) {
            cantools.m_dcxc_connection_state->m_val = x;
            if (!false) {
                emit cantools.m_dcxc_connection_state->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcxc_connection_state=" << cantools.m_dcxc_connection_state->m_val;
        }

        x = store.tx_pdo1_pc_spare3;
        if ((false) || (cantools.m_tx_pdo1_pc_spare3->m_val != x)) {
            cantools.m_tx_pdo1_pc_spare3->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_pc_spare3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_pc_spare3=" << cantools.m_tx_pdo1_pc_spare3->m_val;
        }

        x = store.dcxc_current_sp;
        if ((false) || (cantools.m_dcxc_current_sp->m_val != x)) {
            cantools.m_dcxc_current_sp->m_val = x;
            if (!false) {
                emit cantools.m_dcxc_current_sp->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcxc_current_sp=" << cantools.m_dcxc_current_sp->m_val;
        }

        x = store.tx_pdo1_pc_spare2;
        if ((false) || (cantools.m_tx_pdo1_pc_spare2->m_val != x)) {
            cantools.m_tx_pdo1_pc_spare2->m_val = x;
            if (!false) {
                emit cantools.m_tx_pdo1_pc_spare2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_tx_pdo1_pc_spare2=" << cantools.m_tx_pdo1_pc_spare2->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_tx_pdo1_pc_t store={};
    const QString m_name = "tx_pdo1_pc";
};

class cantoolsQtMessage_dc_dc_sta5b : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta5b_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta5_trafo_temp4_b;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp4_b->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp4_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp4_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp4_b=" << cantools.m_dc_dc_sta5_trafo_temp4_b->m_val;
        }

        x = store.dc_dc_sta5_uls_est_act_b;
        if ((false) || (cantools.m_dc_dc_sta5_uls_est_act_b->m_val != x)) {
            cantools.m_dc_dc_sta5_uls_est_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_uls_est_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_uls_est_act_b=" << cantools.m_dc_dc_sta5_uls_est_act_b->m_val;
        }

        x = store.dc_dc_sta5_uhs_est_act_b;
        if ((false) || (cantools.m_dc_dc_sta5_uhs_est_act_b->m_val != x)) {
            cantools.m_dc_dc_sta5_uhs_est_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_uhs_est_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_uhs_est_act_b=" << cantools.m_dc_dc_sta5_uhs_est_act_b->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp2_b;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp2_b->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp2_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp2_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp2_b=" << cantools.m_dc_dc_sta5_trafo_temp2_b->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp3_b;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp3_b->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp3_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp3_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp3_b=" << cantools.m_dc_dc_sta5_trafo_temp3_b->m_val;
        }

        x = store.dc_dc_sta5_trafo_temp1_b;
        if ((false) || (cantools.m_dc_dc_sta5_trafo_temp1_b->m_val != x)) {
            cantools.m_dc_dc_sta5_trafo_temp1_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta5_trafo_temp1_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta5_trafo_temp1_b=" << cantools.m_dc_dc_sta5_trafo_temp1_b->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta5b_t store={};
    const QString m_name = "dc_dc_sta5b";
};

class cantoolsQtMessage_dc_dc_sta2 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta2_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta2_ils_act;
        if ((false) || (cantools.m_dc_dc_sta2_ils_act->m_val != x)) {
            cantools.m_dc_dc_sta2_ils_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_ils_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_ils_act=" << cantools.m_dc_dc_sta2_ils_act->m_val;
        }

        x = store.dc_dc_sta2_ihs_act;
        if ((false) || (cantools.m_dc_dc_sta2_ihs_act->m_val != x)) {
            cantools.m_dc_dc_sta2_ihs_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_ihs_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_ihs_act=" << cantools.m_dc_dc_sta2_ihs_act->m_val;
        }

        x = store.dc_dc_sta2_uls_act;
        if ((false) || (cantools.m_dc_dc_sta2_uls_act->m_val != x)) {
            cantools.m_dc_dc_sta2_uls_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_uls_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_uls_act=" << cantools.m_dc_dc_sta2_uls_act->m_val;
        }

        x = store.dc_dc_sta2_uhs_act;
        if ((false) || (cantools.m_dc_dc_sta2_uhs_act->m_val != x)) {
            cantools.m_dc_dc_sta2_uhs_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta2_uhs_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta2_uhs_act=" << cantools.m_dc_dc_sta2_uhs_act->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta2_t store={};
    const QString m_name = "dc_dc_sta2";
};

class cantoolsQtMessage_dc_dc_sta3b : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta3b_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta3_warn_wrd2_b;
        if ((false) || (cantools.m_dc_dc_sta3_warn_wrd2_b->m_val != x)) {
            cantools.m_dc_dc_sta3_warn_wrd2_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_warn_wrd2_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_warn_wrd2_b=" << cantools.m_dc_dc_sta3_warn_wrd2_b->m_val;
        }

        x = store.dc_dc_sta3_warn_wrd1_b;
        if ((false) || (cantools.m_dc_dc_sta3_warn_wrd1_b->m_val != x)) {
            cantools.m_dc_dc_sta3_warn_wrd1_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_warn_wrd1_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_warn_wrd1_b=" << cantools.m_dc_dc_sta3_warn_wrd1_b->m_val;
        }

        x = store.dc_dc_sta3_err_wrd1_b;
        if ((false) || (cantools.m_dc_dc_sta3_err_wrd1_b->m_val != x)) {
            cantools.m_dc_dc_sta3_err_wrd1_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_err_wrd1_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_err_wrd1_b=" << cantools.m_dc_dc_sta3_err_wrd1_b->m_val;
        }

        x = store.dc_dc_sta3_err_wrd2_b;
        if ((false) || (cantools.m_dc_dc_sta3_err_wrd2_b->m_val != x)) {
            cantools.m_dc_dc_sta3_err_wrd2_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta3_err_wrd2_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta3_err_wrd2_b=" << cantools.m_dc_dc_sta3_err_wrd2_b->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta3b_t store={};
    const QString m_name = "dc_dc_sta3b";
};

class cantoolsQtMessage_dc_dc_ctrl1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_ctrl1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_ctrl1_on;
        if ((false) || (cantools.m_dc_dc_ctrl1_on->m_val != x)) {
            cantools.m_dc_dc_ctrl1_on->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_on->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_on=" << cantools.m_dc_dc_ctrl1_on->m_val;
        }

        x = store.dc_dc_ctrl1_rele_in;
        if ((false) || (cantools.m_dc_dc_ctrl1_rele_in->m_val != x)) {
            cantools.m_dc_dc_ctrl1_rele_in->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_rele_in->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_rele_in=" << cantools.m_dc_dc_ctrl1_rele_in->m_val;
        }

        x = store.dc_dc_ctrl1_main_sp;
        if ((false) || (cantools.m_dc_dc_ctrl1_main_sp->m_val != x)) {
            cantools.m_dc_dc_ctrl1_main_sp->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_main_sp->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_main_sp=" << cantools.m_dc_dc_ctrl1_main_sp->m_val;
        }

        x = store.dc_dc_ctrl1_rele_out;
        if ((false) || (cantools.m_dc_dc_ctrl1_rele_out->m_val != x)) {
            cantools.m_dc_dc_ctrl1_rele_out->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_rele_out->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_rele_out=" << cantools.m_dc_dc_ctrl1_rele_out->m_val;
        }

        x = store.dcdc_ctrl1_span2;
        if ((false) || (cantools.m_dcdc_ctrl1_span2->m_val != x)) {
            cantools.m_dcdc_ctrl1_span2->m_val = x;
            if (!false) {
                emit cantools.m_dcdc_ctrl1_span2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcdc_ctrl1_span2=" << cantools.m_dcdc_ctrl1_span2->m_val;
        }

        x = store.dc_dc_ctrl1_en;
        if ((false) || (cantools.m_dc_dc_ctrl1_en->m_val != x)) {
            cantools.m_dc_dc_ctrl1_en->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_en->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_en=" << cantools.m_dc_dc_ctrl1_en->m_val;
        }

        x = store.dcdc_ctrl1_span1;
        if ((false) || (cantools.m_dcdc_ctrl1_span1->m_val != x)) {
            cantools.m_dcdc_ctrl1_span1->m_val = x;
            if (!false) {
                emit cantools.m_dcdc_ctrl1_span1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcdc_ctrl1_span1=" << cantools.m_dcdc_ctrl1_span1->m_val;
        }

        x = store.dcdc_ctrl1_span4;
        if ((false) || (cantools.m_dcdc_ctrl1_span4->m_val != x)) {
            cantools.m_dcdc_ctrl1_span4->m_val = x;
            if (!false) {
                emit cantools.m_dcdc_ctrl1_span4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcdc_ctrl1_span4=" << cantools.m_dcdc_ctrl1_span4->m_val;
        }

        x = store.dcdc_ctrl1_span3;
        if ((false) || (cantools.m_dcdc_ctrl1_span3->m_val != x)) {
            cantools.m_dcdc_ctrl1_span3->m_val = x;
            if (!false) {
                emit cantools.m_dcdc_ctrl1_span3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcdc_ctrl1_span3=" << cantools.m_dcdc_ctrl1_span3->m_val;
        }

        x = store.dc_dc_ctrl1_fault_ack;
        if ((false) || (cantools.m_dc_dc_ctrl1_fault_ack->m_val != x)) {
            cantools.m_dc_dc_ctrl1_fault_ack->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_fault_ack->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_fault_ack=" << cantools.m_dc_dc_ctrl1_fault_ack->m_val;
        }

        x = store.dc_dc_ctrl1_main_mode;
        if ((false) || (cantools.m_dc_dc_ctrl1_main_mode->m_val != x)) {
            cantools.m_dc_dc_ctrl1_main_mode->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_ctrl1_main_mode->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_ctrl1_main_mode=" << cantools.m_dc_dc_ctrl1_main_mode->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_ctrl1_t store={};
    const QString m_name = "dc_dc_ctrl1";
};

class cantoolsQtMessage_dc_dc_sta1 : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta1_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta1_uls_lim_max;
        if ((false) || (cantools.m_dc_dc_sta1_uls_lim_max->m_val != x)) {
            cantools.m_dc_dc_sta1_uls_lim_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uls_lim_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uls_lim_max=" << cantools.m_dc_dc_sta1_uls_lim_max->m_val;
        }

        x = store.dc_dc_sta1_spare1;
        if ((false) || (cantools.m_dc_dc_sta1_spare1->m_val != x)) {
            cantools.m_dc_dc_sta1_spare1->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare1->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare1=" << cantools.m_dc_dc_sta1_spare1->m_val;
        }

        x = store.dc_dc_sta1_ihs_lim_min;
        if ((false) || (cantools.m_dc_dc_sta1_ihs_lim_min->m_val != x)) {
            cantools.m_dc_dc_sta1_ihs_lim_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ihs_lim_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ihs_lim_min=" << cantools.m_dc_dc_sta1_ihs_lim_min->m_val;
        }

        x = store.dc_dc_sta1_ils_lim_min;
        if ((false) || (cantools.m_dc_dc_sta1_ils_lim_min->m_val != x)) {
            cantools.m_dc_dc_sta1_ils_lim_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ils_lim_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ils_lim_min=" << cantools.m_dc_dc_sta1_ils_lim_min->m_val;
        }

        x = store.dc_dc_sta1_uls_lim_min;
        if ((false) || (cantools.m_dc_dc_sta1_uls_lim_min->m_val != x)) {
            cantools.m_dc_dc_sta1_uls_lim_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uls_lim_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uls_lim_min=" << cantools.m_dc_dc_sta1_uls_lim_min->m_val;
        }

        x = store.dc_dc_sta1_ihs_lim_max;
        if ((false) || (cantools.m_dc_dc_sta1_ihs_lim_max->m_val != x)) {
            cantools.m_dc_dc_sta1_ihs_lim_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ihs_lim_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ihs_lim_max=" << cantools.m_dc_dc_sta1_ihs_lim_max->m_val;
        }

        x = store.dc_dc_sta1_hs_pre_charge_fbk;
        if ((false) || (cantools.m_dc_dc_sta1_hs_pre_charge_fbk->m_val != x)) {
            cantools.m_dc_dc_sta1_hs_pre_charge_fbk->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_hs_pre_charge_fbk->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_hs_pre_charge_fbk=" << cantools.m_dc_dc_sta1_hs_pre_charge_fbk->m_val;
        }

        x = store.dc_dc_sta1_uhs_lim_max;
        if ((false) || (cantools.m_dc_dc_sta1_uhs_lim_max->m_val != x)) {
            cantools.m_dc_dc_sta1_uhs_lim_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uhs_lim_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uhs_lim_max=" << cantools.m_dc_dc_sta1_uhs_lim_max->m_val;
        }

        x = store.dc_dc_sta1_spare2;
        if ((false) || (cantools.m_dc_dc_sta1_spare2->m_val != x)) {
            cantools.m_dc_dc_sta1_spare2->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare2->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare2=" << cantools.m_dc_dc_sta1_spare2->m_val;
        }

        x = store.dc_dc_sta1_spare4;
        if ((false) || (cantools.m_dc_dc_sta1_spare4->m_val != x)) {
            cantools.m_dc_dc_sta1_spare4->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare4->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare4=" << cantools.m_dc_dc_sta1_spare4->m_val;
        }

        x = store.dc_dc_sta1_rele_1_fbk;
        if ((false) || (cantools.m_dc_dc_sta1_rele_1_fbk->m_val != x)) {
            cantools.m_dc_dc_sta1_rele_1_fbk->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rele_1_fbk->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rele_1_fbk=" << cantools.m_dc_dc_sta1_rele_1_fbk->m_val;
        }

        x = store.dc_dc_sta1_ls_pre_charge_fbk;
        if ((false) || (cantools.m_dc_dc_sta1_ls_pre_charge_fbk->m_val != x)) {
            cantools.m_dc_dc_sta1_ls_pre_charge_fbk->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ls_pre_charge_fbk->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ls_pre_charge_fbk=" << cantools.m_dc_dc_sta1_ls_pre_charge_fbk->m_val;
        }

        x = store.dc_dc_sta1_uhs_lim_min;
        if ((false) || (cantools.m_dc_dc_sta1_uhs_lim_min->m_val != x)) {
            cantools.m_dc_dc_sta1_uhs_lim_min->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uhs_lim_min->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uhs_lim_min=" << cantools.m_dc_dc_sta1_uhs_lim_min->m_val;
        }

        x = store.dc_dc_sta1_rele_2_fbk;
        if ((false) || (cantools.m_dc_dc_sta1_rele_2_fbk->m_val != x)) {
            cantools.m_dc_dc_sta1_rele_2_fbk->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rele_2_fbk->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rele_2_fbk=" << cantools.m_dc_dc_sta1_rele_2_fbk->m_val;
        }

        x = store.dc_dc_sta1_t_pow_unit;
        if ((false) || (cantools.m_dc_dc_sta1_t_pow_unit->m_val != x)) {
            cantools.m_dc_dc_sta1_t_pow_unit->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_t_pow_unit->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_t_pow_unit=" << cantools.m_dc_dc_sta1_t_pow_unit->m_val;
        }

        x = store.dc_dc_sta1_fan_act;
        if ((false) || (cantools.m_dc_dc_sta1_fan_act->m_val != x)) {
            cantools.m_dc_dc_sta1_fan_act->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_fan_act->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_fan_act=" << cantools.m_dc_dc_sta1_fan_act->m_val;
        }

        x = store.dc_dc_sta1_rele_3_fbk;
        if ((false) || (cantools.m_dc_dc_sta1_rele_3_fbk->m_val != x)) {
            cantools.m_dc_dc_sta1_rele_3_fbk->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rele_3_fbk->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rele_3_fbk=" << cantools.m_dc_dc_sta1_rele_3_fbk->m_val;
        }

        x = store.dc_dc_sta1_ils_lim_max;
        if ((false) || (cantools.m_dc_dc_sta1_ils_lim_max->m_val != x)) {
            cantools.m_dc_dc_sta1_ils_lim_max->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ils_lim_max->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ils_lim_max=" << cantools.m_dc_dc_sta1_ils_lim_max->m_val;
        }

        x = store.dc_dc_sta1_rol_cnt;
        if ((false) || (cantools.m_dc_dc_sta1_rol_cnt->m_val != x)) {
            cantools.m_dc_dc_sta1_rol_cnt->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rol_cnt->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rol_cnt=" << cantools.m_dc_dc_sta1_rol_cnt->m_val;
        }

        x = store.dc_dc_sta1_spare3;
        if ((false) || (cantools.m_dc_dc_sta1_spare3->m_val != x)) {
            cantools.m_dc_dc_sta1_spare3->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare3->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare3=" << cantools.m_dc_dc_sta1_spare3->m_val;
        }

        x = store.dc_dc_sta1_cur_avlbl;
        if ((false) || (cantools.m_dc_dc_sta1_cur_avlbl->m_val != x)) {
            cantools.m_dc_dc_sta1_cur_avlbl->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_cur_avlbl->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_cur_avlbl=" << cantools.m_dc_dc_sta1_cur_avlbl->m_val;
        }

        x = store.dc_dc_sta1_err;
        if ((false) || (cantools.m_dc_dc_sta1_err->m_val != x)) {
            cantools.m_dc_dc_sta1_err->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_err->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_err=" << cantools.m_dc_dc_sta1_err->m_val;
        }

        x = store.dc_dc_sta1_warn;
        if ((false) || (cantools.m_dc_dc_sta1_warn->m_val != x)) {
            cantools.m_dc_dc_sta1_warn->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_warn->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_warn=" << cantools.m_dc_dc_sta1_warn->m_val;
        }

        x = store.dc_dc_sta1_rdy;
        if ((false) || (cantools.m_dc_dc_sta1_rdy->m_val != x)) {
            cantools.m_dc_dc_sta1_rdy->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rdy->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rdy=" << cantools.m_dc_dc_sta1_rdy->m_val;
        }

        x = store.dc_dc_sta1_run;
        if ((false) || (cantools.m_dc_dc_sta1_run->m_val != x)) {
            cantools.m_dc_dc_sta1_run->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_run->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_run=" << cantools.m_dc_dc_sta1_run->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta1_t store={};
    const QString m_name = "dc_dc_sta1";
};

class cantoolsQtMessage_dc_dc_sta1b : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_dc_dc_sta1b_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dc_dc_sta1_ihs_lim_max_b;
        if ((false) || (cantools.m_dc_dc_sta1_ihs_lim_max_b->m_val != x)) {
            cantools.m_dc_dc_sta1_ihs_lim_max_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ihs_lim_max_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ihs_lim_max_b=" << cantools.m_dc_dc_sta1_ihs_lim_max_b->m_val;
        }

        x = store.dc_dc_sta1_rol_cnt_b;
        if ((false) || (cantools.m_dc_dc_sta1_rol_cnt_b->m_val != x)) {
            cantools.m_dc_dc_sta1_rol_cnt_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rol_cnt_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rol_cnt_b=" << cantools.m_dc_dc_sta1_rol_cnt_b->m_val;
        }

        x = store.dc_dc_sta1_uls_lim_min_b;
        if ((false) || (cantools.m_dc_dc_sta1_uls_lim_min_b->m_val != x)) {
            cantools.m_dc_dc_sta1_uls_lim_min_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uls_lim_min_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uls_lim_min_b=" << cantools.m_dc_dc_sta1_uls_lim_min_b->m_val;
        }

        x = store.dc_dc_sta1_t_pow_unit_b;
        if ((false) || (cantools.m_dc_dc_sta1_t_pow_unit_b->m_val != x)) {
            cantools.m_dc_dc_sta1_t_pow_unit_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_t_pow_unit_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_t_pow_unit_b=" << cantools.m_dc_dc_sta1_t_pow_unit_b->m_val;
        }

        x = store.dc_dc_sta1_uls_lim_max_b;
        if ((false) || (cantools.m_dc_dc_sta1_uls_lim_max_b->m_val != x)) {
            cantools.m_dc_dc_sta1_uls_lim_max_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uls_lim_max_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uls_lim_max_b=" << cantools.m_dc_dc_sta1_uls_lim_max_b->m_val;
        }

        x = store.dc_dc_sta1_rele_1_fbk_b;
        if ((false) || (cantools.m_dc_dc_sta1_rele_1_fbk_b->m_val != x)) {
            cantools.m_dc_dc_sta1_rele_1_fbk_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rele_1_fbk_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rele_1_fbk_b=" << cantools.m_dc_dc_sta1_rele_1_fbk_b->m_val;
        }

        x = store.dc_dc_sta1_cur_avlbl_b;
        if ((false) || (cantools.m_dc_dc_sta1_cur_avlbl_b->m_val != x)) {
            cantools.m_dc_dc_sta1_cur_avlbl_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_cur_avlbl_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_cur_avlbl_b=" << cantools.m_dc_dc_sta1_cur_avlbl_b->m_val;
        }

        x = store.dc_dc_sta1_fan_act_b;
        if ((false) || (cantools.m_dc_dc_sta1_fan_act_b->m_val != x)) {
            cantools.m_dc_dc_sta1_fan_act_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_fan_act_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_fan_act_b=" << cantools.m_dc_dc_sta1_fan_act_b->m_val;
        }

        x = store.dc_dc_sta1_spare2_b;
        if ((false) || (cantools.m_dc_dc_sta1_spare2_b->m_val != x)) {
            cantools.m_dc_dc_sta1_spare2_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare2_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare2_b=" << cantools.m_dc_dc_sta1_spare2_b->m_val;
        }

        x = store.dc_dc_sta1_ils_lim_min_b;
        if ((false) || (cantools.m_dc_dc_sta1_ils_lim_min_b->m_val != x)) {
            cantools.m_dc_dc_sta1_ils_lim_min_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ils_lim_min_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ils_lim_min_b=" << cantools.m_dc_dc_sta1_ils_lim_min_b->m_val;
        }

        x = store.dc_dc_sta1_spare1_b;
        if ((false) || (cantools.m_dc_dc_sta1_spare1_b->m_val != x)) {
            cantools.m_dc_dc_sta1_spare1_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare1_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare1_b=" << cantools.m_dc_dc_sta1_spare1_b->m_val;
        }

        x = store.dc_dc_sta1_ils_lim_max_b;
        if ((false) || (cantools.m_dc_dc_sta1_ils_lim_max_b->m_val != x)) {
            cantools.m_dc_dc_sta1_ils_lim_max_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ils_lim_max_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ils_lim_max_b=" << cantools.m_dc_dc_sta1_ils_lim_max_b->m_val;
        }

        x = store.dc_dc_sta1_run_b;
        if ((false) || (cantools.m_dc_dc_sta1_run_b->m_val != x)) {
            cantools.m_dc_dc_sta1_run_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_run_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_run_b=" << cantools.m_dc_dc_sta1_run_b->m_val;
        }

        x = store.dc_dc_sta1_err_b;
        if ((false) || (cantools.m_dc_dc_sta1_err_b->m_val != x)) {
            cantools.m_dc_dc_sta1_err_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_err_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_err_b=" << cantools.m_dc_dc_sta1_err_b->m_val;
        }

        x = store.dc_dc_sta1_rdy_b;
        if ((false) || (cantools.m_dc_dc_sta1_rdy_b->m_val != x)) {
            cantools.m_dc_dc_sta1_rdy_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rdy_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rdy_b=" << cantools.m_dc_dc_sta1_rdy_b->m_val;
        }

        x = store.dc_dc_sta1_uhs_lim_max_b;
        if ((false) || (cantools.m_dc_dc_sta1_uhs_lim_max_b->m_val != x)) {
            cantools.m_dc_dc_sta1_uhs_lim_max_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uhs_lim_max_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uhs_lim_max_b=" << cantools.m_dc_dc_sta1_uhs_lim_max_b->m_val;
        }

        x = store.dc_dc_sta1_warn_b;
        if ((false) || (cantools.m_dc_dc_sta1_warn_b->m_val != x)) {
            cantools.m_dc_dc_sta1_warn_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_warn_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_warn_b=" << cantools.m_dc_dc_sta1_warn_b->m_val;
        }

        x = store.dc_dc_sta1_uhs_lim_min_b;
        if ((false) || (cantools.m_dc_dc_sta1_uhs_lim_min_b->m_val != x)) {
            cantools.m_dc_dc_sta1_uhs_lim_min_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_uhs_lim_min_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_uhs_lim_min_b=" << cantools.m_dc_dc_sta1_uhs_lim_min_b->m_val;
        }

        x = store.dc_dc_sta1_rele_2_fbk_b;
        if ((false) || (cantools.m_dc_dc_sta1_rele_2_fbk_b->m_val != x)) {
            cantools.m_dc_dc_sta1_rele_2_fbk_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rele_2_fbk_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rele_2_fbk_b=" << cantools.m_dc_dc_sta1_rele_2_fbk_b->m_val;
        }

        x = store.dc_dc_sta1_hs_pre_charge_fbk_b;
        if ((false) || (cantools.m_dc_dc_sta1_hs_pre_charge_fbk_b->m_val != x)) {
            cantools.m_dc_dc_sta1_hs_pre_charge_fbk_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_hs_pre_charge_fbk_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_hs_pre_charge_fbk_b=" << cantools.m_dc_dc_sta1_hs_pre_charge_fbk_b->m_val;
        }

        x = store.dc_dc_sta1_spare4_b;
        if ((false) || (cantools.m_dc_dc_sta1_spare4_b->m_val != x)) {
            cantools.m_dc_dc_sta1_spare4_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare4_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare4_b=" << cantools.m_dc_dc_sta1_spare4_b->m_val;
        }

        x = store.dc_dc_sta1_rele_3_fbk_b;
        if ((false) || (cantools.m_dc_dc_sta1_rele_3_fbk_b->m_val != x)) {
            cantools.m_dc_dc_sta1_rele_3_fbk_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_rele_3_fbk_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_rele_3_fbk_b=" << cantools.m_dc_dc_sta1_rele_3_fbk_b->m_val;
        }

        x = store.dc_dc_sta1_ihs_lim_min_b;
        if ((false) || (cantools.m_dc_dc_sta1_ihs_lim_min_b->m_val != x)) {
            cantools.m_dc_dc_sta1_ihs_lim_min_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ihs_lim_min_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ihs_lim_min_b=" << cantools.m_dc_dc_sta1_ihs_lim_min_b->m_val;
        }

        x = store.dc_dc_sta1_ls_pre_charge_fbk_b;
        if ((false) || (cantools.m_dc_dc_sta1_ls_pre_charge_fbk_b->m_val != x)) {
            cantools.m_dc_dc_sta1_ls_pre_charge_fbk_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_ls_pre_charge_fbk_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_ls_pre_charge_fbk_b=" << cantools.m_dc_dc_sta1_ls_pre_charge_fbk_b->m_val;
        }

        x = store.dc_dc_sta1_spare3_b;
        if ((false) || (cantools.m_dc_dc_sta1_spare3_b->m_val != x)) {
            cantools.m_dc_dc_sta1_spare3_b->m_val = x;
            if (!false) {
                emit cantools.m_dc_dc_sta1_spare3_b->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dc_dc_sta1_spare3_b=" << cantools.m_dc_dc_sta1_spare3_b->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_dc_dc_sta1b_t store={};
    const QString m_name = "dc_dc_sta1b";
};

class cantoolsQtMessage_rx_pdo1_pc : public cantoolsQtMessage
{
    Q_OBJECT

    Q_PROPERTY(QString name MEMBER m_name CONSTANT)

    using cantoolsQtMessage::cantoolsQtMessage;

    void received(const QCanBusFrame &frame) {
        float x;
        Q_UNUSED(x);
        cantoolsQtSignals &cantools = cantoolsQtSignals::instance();

        m_timestamp = ((frame.timeStamp().seconds() * 1000) + (frame.timeStamp().microSeconds() / 1000));

        if (!m_valid) {
            m_valid = true;
            emit on_valid(QDateTime::fromMSecsSinceEpoch(m_timestamp));
        }

        if (is_extended != frame.hasExtendedFrameFormat()) return;
        if (m_length != static_cast<uint>(frame.payload().length())) return;

        cantools_rx_pdo1_pc_unpack(
                    &store,
                    reinterpret_cast<unsigned char*>(frame.payload().data())
                    );

        x = store.dcxc_voltage_link_side;
        if ((false) || (cantools.m_dcxc_voltage_link_side->m_val != x)) {
            cantools.m_dcxc_voltage_link_side->m_val = x;
            if (!false) {
                emit cantools.m_dcxc_voltage_link_side->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcxc_voltage_link_side=" << cantools.m_dcxc_voltage_link_side->m_val;
        }

        x = store.dcxc_voltage_fc_side;
        if ((false) || (cantools.m_dcxc_voltage_fc_side->m_val != x)) {
            cantools.m_dcxc_voltage_fc_side->m_val = x;
            if (!false) {
                emit cantools.m_dcxc_voltage_fc_side->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcxc_voltage_fc_side=" << cantools.m_dcxc_voltage_fc_side->m_val;
        }

        x = store.dcxc_current_fc_side;
        if ((false) || (cantools.m_dcxc_current_fc_side->m_val != x)) {
            cantools.m_dcxc_current_fc_side->m_val = x;
            if (!false) {
                emit cantools.m_dcxc_current_fc_side->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcxc_current_fc_side=" << cantools.m_dcxc_current_fc_side->m_val;
        }

        x = store.dcxc_current_link_side;
        if ((false) || (cantools.m_dcxc_current_link_side->m_val != x)) {
            cantools.m_dcxc_current_link_side->m_val = x;
            if (!false) {
                emit cantools.m_dcxc_current_link_side->changed(QDateTime::fromMSecsSinceEpoch(m_timestamp));
            }
            qCDebug(rgm_cantools_cantools) << hex << "m_dcxc_current_link_side=" << cantools.m_dcxc_current_link_side->m_val;
        }

    }

    
public slots:
    void send_frame();

public:
    struct cantools_rx_pdo1_pc_t store={};
    const QString m_name = "rx_pdo1_pc";
};


/**
 * Class that groups all messages
 */
class cantoolsQtMessages : public QObject
{
    Q_OBJECT
    
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta6 MEMBER dc_dc_sta6 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta6b MEMBER dc_dc_sta6b CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc4 MEMBER dc_dc4 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* iso_tp_response_vms MEMBER iso_tp_response_vms CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc3 MEMBER dc_dc3 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* iso_tp_request MEMBER iso_tp_request CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_sdo2 MEMBER tx_sdo2 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_pdo1_vn1 MEMBER tx_pdo1_vn1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta5 MEMBER dc_dc_sta5 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* rx_sdo3 MEMBER rx_sdo3 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_ctrl3 MEMBER dc_dc_ctrl3 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_sdo1 MEMBER tx_sdo1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta2b MEMBER dc_dc_sta2b CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_sdo3 MEMBER tx_sdo3 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* rx_pdo1 MEMBER rx_pdo1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* rx_sdo2 MEMBER rx_sdo2 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_pdo3 MEMBER tx_pdo3 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc1 MEMBER dc_dc1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta3 MEMBER dc_dc_sta3 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_pdo2 MEMBER tx_pdo2 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc2 MEMBER dc_dc2 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_ctrl2 MEMBER dc_dc_ctrl2 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* rx_sdo1 MEMBER rx_sdo1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_pdo1 MEMBER tx_pdo1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_pdo4 MEMBER tx_pdo4 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* tx_pdo1_pc MEMBER tx_pdo1_pc CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta5b MEMBER dc_dc_sta5b CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta2 MEMBER dc_dc_sta2 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta3b MEMBER dc_dc_sta3b CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_ctrl1 MEMBER dc_dc_ctrl1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta1 MEMBER dc_dc_sta1 CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* dc_dc_sta1b MEMBER dc_dc_sta1b CONSTANT)
    Q_PROPERTY(cantoolsQtMessage* rx_pdo1_pc MEMBER rx_pdo1_pc CONSTANT)

signals:
    void sendFrame(const QCanBusFrame &frame ) const;
    

private:
    cantoolsQtMessages(QObject * = nullptr) {

        map[0x126] = dc_dc_sta6 = new cantoolsQtMessage_dc_dc_sta6( 0x126, false, 8, 0);
        map[0x136] = dc_dc_sta6b = new cantoolsQtMessage_dc_dc_sta6b( 0x136, false, 8, 0);
        map[0x83] = dc_dc4 = new cantoolsQtMessage_dc_dc4( 0x83, false, 8, 0);
        map[0x7c5] = iso_tp_response_vms = new cantoolsQtMessage_iso_tp_response_vms( 0x7c5, false, 8, 0);
        map[0x82] = dc_dc3 = new cantoolsQtMessage_dc_dc3( 0x82, false, 8, 0);
        map[0x7b0] = iso_tp_request = new cantoolsQtMessage_iso_tp_request( 0x7b0, false, 8, 0);
        map[0x591] = tx_sdo2 = new cantoolsQtMessage_tx_sdo2( 0x591, false, 1, 0);
        map[0x192] = tx_pdo1_vn1 = new cantoolsQtMessage_tx_pdo1_vn1( 0x192, false, 8, 0);
        map[0x125] = dc_dc_sta5 = new cantoolsQtMessage_dc_dc_sta5( 0x125, false, 8, 0);
        map[0x612] = rx_sdo3 = new cantoolsQtMessage_rx_sdo3( 0x612, false, 1, 0);
        map[0x63] = dc_dc_ctrl3 = new cantoolsQtMessage_dc_dc_ctrl3( 0x63, false, 8, 0);
        map[0x590] = tx_sdo1 = new cantoolsQtMessage_tx_sdo1( 0x590, false, 1, 0);
        map[0x132] = dc_dc_sta2b = new cantoolsQtMessage_dc_dc_sta2b( 0x132, false, 8, 0);
        map[0x592] = tx_sdo3 = new cantoolsQtMessage_tx_sdo3( 0x592, false, 1, 0);
        map[0x210] = rx_pdo1 = new cantoolsQtMessage_rx_pdo1( 0x210, false, 8, 0);
        map[0x611] = rx_sdo2 = new cantoolsQtMessage_rx_sdo2( 0x611, false, 1, 0);
        map[0x390] = tx_pdo3 = new cantoolsQtMessage_tx_pdo3( 0x390, false, 8, 0);
        map[0x80] = dc_dc1 = new cantoolsQtMessage_dc_dc1( 0x80, false, 8, 0);
        map[0x123] = dc_dc_sta3 = new cantoolsQtMessage_dc_dc_sta3( 0x123, false, 8, 0);
        map[0x290] = tx_pdo2 = new cantoolsQtMessage_tx_pdo2( 0x290, false, 8, 0);
        map[0x81] = dc_dc2 = new cantoolsQtMessage_dc_dc2( 0x81, false, 8, 0);
        map[0x62] = dc_dc_ctrl2 = new cantoolsQtMessage_dc_dc_ctrl2( 0x62, false, 8, 0);
        map[0x610] = rx_sdo1 = new cantoolsQtMessage_rx_sdo1( 0x610, false, 1, 0);
        map[0x190] = tx_pdo1 = new cantoolsQtMessage_tx_pdo1( 0x190, false, 8, 0);
        map[0x490] = tx_pdo4 = new cantoolsQtMessage_tx_pdo4( 0x490, false, 8, 0);
        map[0x191] = tx_pdo1_pc = new cantoolsQtMessage_tx_pdo1_pc( 0x191, false, 8, 0);
        map[0x135] = dc_dc_sta5b = new cantoolsQtMessage_dc_dc_sta5b( 0x135, false, 8, 0);
        map[0x122] = dc_dc_sta2 = new cantoolsQtMessage_dc_dc_sta2( 0x122, false, 8, 0);
        map[0x133] = dc_dc_sta3b = new cantoolsQtMessage_dc_dc_sta3b( 0x133, false, 8, 0);
        map[0x61] = dc_dc_ctrl1 = new cantoolsQtMessage_dc_dc_ctrl1( 0x61, false, 8, 0);
        map[0x121] = dc_dc_sta1 = new cantoolsQtMessage_dc_dc_sta1( 0x121, false, 8, 0);
        map[0x131] = dc_dc_sta1b = new cantoolsQtMessage_dc_dc_sta1b( 0x131, false, 8, 0);
        map[0x211] = rx_pdo1_pc = new cantoolsQtMessage_rx_pdo1_pc( 0x211, false, 8, 0);

    }

public:
    cantoolsQtMessage* dc_dc_sta6;
    cantoolsQtMessage* dc_dc_sta6b;
    cantoolsQtMessage* dc_dc4;
    cantoolsQtMessage* iso_tp_response_vms;
    cantoolsQtMessage* dc_dc3;
    cantoolsQtMessage* iso_tp_request;
    cantoolsQtMessage* tx_sdo2;
    cantoolsQtMessage* tx_pdo1_vn1;
    cantoolsQtMessage* dc_dc_sta5;
    cantoolsQtMessage* rx_sdo3;
    cantoolsQtMessage* dc_dc_ctrl3;
    cantoolsQtMessage* tx_sdo1;
    cantoolsQtMessage* dc_dc_sta2b;
    cantoolsQtMessage* tx_sdo3;
    cantoolsQtMessage* rx_pdo1;
    cantoolsQtMessage* rx_sdo2;
    cantoolsQtMessage* tx_pdo3;
    cantoolsQtMessage* dc_dc1;
    cantoolsQtMessage* dc_dc_sta3;
    cantoolsQtMessage* tx_pdo2;
    cantoolsQtMessage* dc_dc2;
    cantoolsQtMessage* dc_dc_ctrl2;
    cantoolsQtMessage* rx_sdo1;
    cantoolsQtMessage* tx_pdo1;
    cantoolsQtMessage* tx_pdo4;
    cantoolsQtMessage* tx_pdo1_pc;
    cantoolsQtMessage* dc_dc_sta5b;
    cantoolsQtMessage* dc_dc_sta2;
    cantoolsQtMessage* dc_dc_sta3b;
    cantoolsQtMessage* dc_dc_ctrl1;
    cantoolsQtMessage* dc_dc_sta1;
    cantoolsQtMessage* dc_dc_sta1b;
    cantoolsQtMessage* rx_pdo1_pc;

public slots:
    void periodic_check_validity() {
        qint64 now = QDateTime::currentMSecsSinceEpoch();
        Q_UNUSED(now);
        // qint64 deltat = now - m_timestamp;


    }

public:
    QMap<uint, cantoolsQtMessage*> map;
    static cantoolsQtMessages& instance() {
        static cantoolsQtMessages * _instance = nullptr;
        if ( _instance == nullptr ) {
            _instance = new cantoolsQtMessages();
        }
        return *_instance;
    }

    void can_receive_frame_callback(const QCanBusFrame &frame);

};

#endif // close CANTOOLS_QT_H
