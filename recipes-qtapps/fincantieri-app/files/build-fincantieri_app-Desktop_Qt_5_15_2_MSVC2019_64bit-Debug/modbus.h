/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.4.12 Tue Aug  2 15:22:19 2022.
 */

#ifndef MODBUS_H
#define MODBUS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <assert.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#ifdef __TMS320C2000__
 #define uint8_t uint16_t
 #define int8_t int16_t
#endif

/* Frame ids. */
#define MODBUS_FC_DCDC_STATUS_FRAME_ID (0x9c41u)
#define MODBUS_DCDC_VOLTAGE_FRAME_ID (0x9c43u)
#define MODBUS_FC_DCDC_CURRENT_FRAME_ID (0x9c44u)
#define MODBUS_FC_DCDC_POWER_FRAME_ID (0x9c45u)
#define MODBUS_FC_DCDC_POWER_LIMITATION_FRAME_ID (0x9c46u)
#define MODBUS_DCDC_COMMAND_FRAME_ID (0x9c47u)
#define MODBUS_FCSTACK_STATUS_FRAME_ID (0x7531u)
#define MODBUS_DCDC_STATUS_FRAME_ID (0x7532u)
#define MODBUS_DCDC_PWR_UNIT_TEMPERATURE_FRAME_ID (0x7533u)
#define MODBUS_DCDC_MAX_AVAILABLE_CURRENT_FRAME_ID (0x7534u)
#define MODBUS_DCDC_MAX_AVAILABLE_FC_CURRENT_FRAME_ID (0x7535u)
#define MODBUS_DCDC_MAX_AVAILABLE_POWER_FRAME_ID (0x7536u)
#define MODBUS_FCSTACK_VOLTAGE_FRAME_ID (0x7537u)
#define MODBUS_FCSTACK_CURRENT_FRAME_ID (0x7538u)
#define MODBUS_DC_BUS_VOLTAGE_FRAME_ID (0x7539u)
#define MODBUS_DC_BUS_CURRENT_FRAME_ID (0x753au)
#define MODBUS_MSG_30051_FRAME_ID (0x7563u)
#define MODBUS_MSG_30052_FRAME_ID (0x7564u)
#define MODBUS_MSG_30053_FRAME_ID (0x7565u)
#define MODBUS_DCDC_WARNING_WORD_1_FRAME_ID (0x756du)
#define MODBUS_DCDC_WARNING_WORD_2_FRAME_ID (0x756eu)
#define MODBUS_DCDC_WARNING_WORD_3_FRAME_ID (0x756fu)
#define MODBUS_MSG_30101_FRAME_ID (0x7595u)
#define MODBUS_POWER_CURRENT_MODE_FRAME_ID (0x9d09u)
#define MODBUS_POWER_CURRENT_REFERENCE_FRAME_ID (0x9d0au)
#define MODBUS_POWER_CURRENT_MIN_HANDLING_FRAME_ID (0x9d0bu)
#define MODBUS_MSG_40204_FRAME_ID (0x9d0cu)
#define MODBUS_MSG_30201_FRAME_ID (0x75f9u)
#define MODBUS_POS_MIX_VALVE_FRAME_ID (0x75fau)
#define MODBUS_TCM_HS_PRI_OUT_FRAME_ID (0x75fbu)
#define MODBUS_TCM_HS_SEC_IN_SP_FRAME_ID (0x75fcu)
#define MODBUS_FC_POWER_ACT_FRAME_ID (0x75fdu)
#define MODBUS_FC_POWER_PERIPHERAL_FRAME_ID (0x75feu)
#define MODBUS_FC_POWER_OPT_FRAME_ID (0x75ffu)
#define MODBUS_FC_POWER_MAX_FRAME_ID (0x7600u)
#define MODBUS_FC_POWER_MAX_STATE_FRAME_ID (0x7601u)
#define MODBUS_FC_POWER_MIN_FRAME_ID (0x7602u)
#define MODBUS_ESTIMATED_TIME_TO_POWER_FRAME_ID (0x7603u)
#define MODBUS_ESTIMATED_TIME_FOR_SHUTDOWN_FRAME_ID (0x7604u)
#define MODBUS_FC_POWER_SP_FRAME_ID (0x7605u)
#define MODBUS_FC_EVENT_CODE_FRAME_ID (0x762bu)
#define MODBUS_FC_EXTENDED_INFO_FRAME_ID (0x762du)

/* Frame lengths in bytes. */
#define MODBUS_FC_DCDC_STATUS_LENGTH (2u)
#define MODBUS_DCDC_VOLTAGE_LENGTH (2u)
#define MODBUS_FC_DCDC_CURRENT_LENGTH (2u)
#define MODBUS_FC_DCDC_POWER_LENGTH (2u)
#define MODBUS_FC_DCDC_POWER_LIMITATION_LENGTH (2u)
#define MODBUS_DCDC_COMMAND_LENGTH (2u)
#define MODBUS_FCSTACK_STATUS_LENGTH (2u)
#define MODBUS_DCDC_STATUS_LENGTH (2u)
#define MODBUS_DCDC_PWR_UNIT_TEMPERATURE_LENGTH (2u)
#define MODBUS_DCDC_MAX_AVAILABLE_CURRENT_LENGTH (2u)
#define MODBUS_DCDC_MAX_AVAILABLE_FC_CURRENT_LENGTH (2u)
#define MODBUS_DCDC_MAX_AVAILABLE_POWER_LENGTH (2u)
#define MODBUS_FCSTACK_VOLTAGE_LENGTH (2u)
#define MODBUS_FCSTACK_CURRENT_LENGTH (2u)
#define MODBUS_DC_BUS_VOLTAGE_LENGTH (2u)
#define MODBUS_DC_BUS_CURRENT_LENGTH (2u)
#define MODBUS_MSG_30051_LENGTH (2u)
#define MODBUS_MSG_30052_LENGTH (2u)
#define MODBUS_MSG_30053_LENGTH (2u)
#define MODBUS_DCDC_WARNING_WORD_1_LENGTH (2u)
#define MODBUS_DCDC_WARNING_WORD_2_LENGTH (2u)
#define MODBUS_DCDC_WARNING_WORD_3_LENGTH (2u)
#define MODBUS_MSG_30101_LENGTH (2u)
#define MODBUS_POWER_CURRENT_MODE_LENGTH (2u)
#define MODBUS_POWER_CURRENT_REFERENCE_LENGTH (2u)
#define MODBUS_POWER_CURRENT_MIN_HANDLING_LENGTH (2u)
#define MODBUS_MSG_40204_LENGTH (2u)
#define MODBUS_MSG_30201_LENGTH (2u)
#define MODBUS_POS_MIX_VALVE_LENGTH (2u)
#define MODBUS_TCM_HS_PRI_OUT_LENGTH (2u)
#define MODBUS_TCM_HS_SEC_IN_SP_LENGTH (2u)
#define MODBUS_FC_POWER_ACT_LENGTH (2u)
#define MODBUS_FC_POWER_PERIPHERAL_LENGTH (2u)
#define MODBUS_FC_POWER_OPT_LENGTH (2u)
#define MODBUS_FC_POWER_MAX_LENGTH (2u)
#define MODBUS_FC_POWER_MAX_STATE_LENGTH (2u)
#define MODBUS_FC_POWER_MIN_LENGTH (2u)
#define MODBUS_ESTIMATED_TIME_TO_POWER_LENGTH (2u)
#define MODBUS_ESTIMATED_TIME_FOR_SHUTDOWN_LENGTH (2u)
#define MODBUS_FC_POWER_SP_LENGTH (2u)
#define MODBUS_FC_EVENT_CODE_LENGTH (4u)
#define MODBUS_FC_EXTENDED_INFO_LENGTH (4u)

/* Extended or standard frame types. */
#define MODBUS_FC_DCDC_STATUS_IS_EXTENDED (1)
#define MODBUS_DCDC_VOLTAGE_IS_EXTENDED (1)
#define MODBUS_FC_DCDC_CURRENT_IS_EXTENDED (1)
#define MODBUS_FC_DCDC_POWER_IS_EXTENDED (1)
#define MODBUS_FC_DCDC_POWER_LIMITATION_IS_EXTENDED (1)
#define MODBUS_DCDC_COMMAND_IS_EXTENDED (1)
#define MODBUS_FCSTACK_STATUS_IS_EXTENDED (1)
#define MODBUS_DCDC_STATUS_IS_EXTENDED (1)
#define MODBUS_DCDC_PWR_UNIT_TEMPERATURE_IS_EXTENDED (1)
#define MODBUS_DCDC_MAX_AVAILABLE_CURRENT_IS_EXTENDED (1)
#define MODBUS_DCDC_MAX_AVAILABLE_FC_CURRENT_IS_EXTENDED (1)
#define MODBUS_DCDC_MAX_AVAILABLE_POWER_IS_EXTENDED (1)
#define MODBUS_FCSTACK_VOLTAGE_IS_EXTENDED (1)
#define MODBUS_FCSTACK_CURRENT_IS_EXTENDED (1)
#define MODBUS_DC_BUS_VOLTAGE_IS_EXTENDED (1)
#define MODBUS_DC_BUS_CURRENT_IS_EXTENDED (1)
#define MODBUS_MSG_30051_IS_EXTENDED (1)
#define MODBUS_MSG_30052_IS_EXTENDED (1)
#define MODBUS_MSG_30053_IS_EXTENDED (1)
#define MODBUS_DCDC_WARNING_WORD_1_IS_EXTENDED (1)
#define MODBUS_DCDC_WARNING_WORD_2_IS_EXTENDED (1)
#define MODBUS_DCDC_WARNING_WORD_3_IS_EXTENDED (1)
#define MODBUS_MSG_30101_IS_EXTENDED (1)
#define MODBUS_POWER_CURRENT_MODE_IS_EXTENDED (1)
#define MODBUS_POWER_CURRENT_REFERENCE_IS_EXTENDED (1)
#define MODBUS_POWER_CURRENT_MIN_HANDLING_IS_EXTENDED (1)
#define MODBUS_MSG_40204_IS_EXTENDED (1)
#define MODBUS_MSG_30201_IS_EXTENDED (1)
#define MODBUS_POS_MIX_VALVE_IS_EXTENDED (1)
#define MODBUS_TCM_HS_PRI_OUT_IS_EXTENDED (1)
#define MODBUS_TCM_HS_SEC_IN_SP_IS_EXTENDED (1)
#define MODBUS_FC_POWER_ACT_IS_EXTENDED (1)
#define MODBUS_FC_POWER_PERIPHERAL_IS_EXTENDED (1)
#define MODBUS_FC_POWER_OPT_IS_EXTENDED (1)
#define MODBUS_FC_POWER_MAX_IS_EXTENDED (1)
#define MODBUS_FC_POWER_MAX_STATE_IS_EXTENDED (1)
#define MODBUS_FC_POWER_MIN_IS_EXTENDED (1)
#define MODBUS_ESTIMATED_TIME_TO_POWER_IS_EXTENDED (1)
#define MODBUS_ESTIMATED_TIME_FOR_SHUTDOWN_IS_EXTENDED (1)
#define MODBUS_FC_POWER_SP_IS_EXTENDED (1)
#define MODBUS_FC_EVENT_CODE_IS_EXTENDED (1)
#define MODBUS_FC_EXTENDED_INFO_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
/* RX/TX MESSAGE */
#define MODBUS_FC_DCDC_STATUS_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_VOLTAGE_CYCLE_TIME_MS (0u)
#define MODBUS_FC_DCDC_CURRENT_CYCLE_TIME_MS (0u)
#define MODBUS_FC_DCDC_POWER_CYCLE_TIME_MS (0u)
#define MODBUS_FC_DCDC_POWER_LIMITATION_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_COMMAND_CYCLE_TIME_MS (0u)
#define MODBUS_FCSTACK_STATUS_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_STATUS_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_PWR_UNIT_TEMPERATURE_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_MAX_AVAILABLE_CURRENT_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_MAX_AVAILABLE_FC_CURRENT_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_MAX_AVAILABLE_POWER_CYCLE_TIME_MS (0u)
#define MODBUS_FCSTACK_VOLTAGE_CYCLE_TIME_MS (0u)
#define MODBUS_FCSTACK_CURRENT_CYCLE_TIME_MS (0u)
#define MODBUS_DC_BUS_VOLTAGE_CYCLE_TIME_MS (0u)
#define MODBUS_DC_BUS_CURRENT_CYCLE_TIME_MS (0u)
#define MODBUS_MSG_30051_CYCLE_TIME_MS (0u)
#define MODBUS_MSG_30052_CYCLE_TIME_MS (0u)
#define MODBUS_MSG_30053_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_WARNING_WORD_1_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_WARNING_WORD_2_CYCLE_TIME_MS (0u)
#define MODBUS_DCDC_WARNING_WORD_3_CYCLE_TIME_MS (0u)
#define MODBUS_MSG_30101_CYCLE_TIME_MS (0u)
#define MODBUS_POWER_CURRENT_MODE_CYCLE_TIME_MS (0u)
#define MODBUS_POWER_CURRENT_REFERENCE_CYCLE_TIME_MS (0u)
#define MODBUS_POWER_CURRENT_MIN_HANDLING_CYCLE_TIME_MS (0u)
#define MODBUS_MSG_40204_CYCLE_TIME_MS (0u)
#define MODBUS_MSG_30201_CYCLE_TIME_MS (0u)
#define MODBUS_POS_MIX_VALVE_CYCLE_TIME_MS (0u)
#define MODBUS_TCM_HS_PRI_OUT_CYCLE_TIME_MS (0u)
#define MODBUS_TCM_HS_SEC_IN_SP_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_ACT_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_PERIPHERAL_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_OPT_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_MAX_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_MAX_STATE_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_MIN_CYCLE_TIME_MS (0u)
#define MODBUS_ESTIMATED_TIME_TO_POWER_CYCLE_TIME_MS (0u)
#define MODBUS_ESTIMATED_TIME_FOR_SHUTDOWN_CYCLE_TIME_MS (0u)
#define MODBUS_FC_POWER_SP_CYCLE_TIME_MS (0u)
#define MODBUS_FC_EVENT_CODE_CYCLE_TIME_MS (0u)
#define MODBUS_FC_EXTENDED_INFO_CYCLE_TIME_MS (0u)

/* Signal choices. */



/**
 * Signals in message FC_DCDC_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_dcdc_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_dcdc_running : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_dcdc_failure : 1;
};

/**
 * Signals in message DCDC_VOLTAGE.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_voltage_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dcdc_voltage;
};

/**
 * Signals in message FC_DCDC_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_dcdc_current_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float fc_dcdc_current;
};

/**
 * Signals in message FC_DCDC_POWER.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_dcdc_power_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float fc_dcdc_power;
};

/**
 * Signals in message FC_DCDC_POWER_LIMITATION.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_dcdc_power_limitation_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float fc_dcdc_power_limitation;
};

/**
 * Signals in message DCDC_COMMAND.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_command_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_reset2 : 1;
};

/**
 * Signals in message FCSTACK_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fcstack_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcstack_status : 8;
};

/**
 * Signals in message DCDC_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_status : 8;
};

/**
 * Signals in message DCDC_PWR_UNIT_TEMPERATURE.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_pwr_unit_temperature_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dcdc_pwr_unit_temperature;
};

/**
 * Signals in message DCDC_MAX_AVAILABLE_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_max_available_current_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dcdc_max_available_current;
};

/**
 * Signals in message DCDC_MAX_AVAILABLE_FC_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_max_available_fc_current_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dcdc_max_available_fc_current;
};

/**
 * Signals in message DCDC_MAX_AVAILABLE_POWER.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_max_available_power_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float dcdc_max_available_power;
};

/**
 * Signals in message FCSTACK_VOLTAGE.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fcstack_voltage_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float fcstack_voltage;
};

/**
 * Signals in message FCSTACK_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fcstack_current_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float fcstack_current;
};

/**
 * Signals in message DC_BUS_VOLTAGE.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dc_bus_voltage_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_bus_voltage;
};

/**
 * Signals in message DC_BUS_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dc_bus_current_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float dc_bus_current;
};

/**
 * Signals in message Msg_30051.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_msg_30051_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_error_word_1 : 16;
};

/**
 * Signals in message Msg_30052.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_msg_30052_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_error_word_2 : 16;
};

/**
 * Signals in message Msg_30053.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_msg_30053_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_error_word_3 : 16;
};

/**
 * Signals in message DCDC_WARNING_WORD_1.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_warning_word_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_warning_word_1 : 16;
};

/**
 * Signals in message DCDC_WARNING_WORD_2.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_warning_word_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_warning_word_2 : 16;
};

/**
 * Signals in message DCDC_WARNING_WORD_3.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_dcdc_warning_word_3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_warning_word_3 : 16;
};

/**
 * Signals in message Msg_30101.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_msg_30101_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_status_word_1 : 16;
};

/**
 * Signals in message PowerCurrentMode.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_power_current_mode_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_current_mode : 8;
};

/**
 * Signals in message PowerCurrentReference.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_power_current_reference_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_current_reference : 8;
};

/**
 * Signals in message PowerCurrentMinHandling.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_power_current_min_handling_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_current_min_handling : 8;
};

/**
 * Signals in message Msg_40204.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_msg_40204_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_off_request : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_shutdown_request : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t freeze_protection_request : 1;
};

/**
 * Signals in message Msg_30201.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_msg_30201_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mute_h2_sens_exhaust2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status_freeze_protection : 1;
};

/**
 * Signals in message Pos_Mix_Valve.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_pos_mix_valve_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pos_mix_valve2 : 8;
};

/**
 * Signals in message Tcm_Hs_Pri_Out.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_tcm_hs_pri_out_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float tcm_hs_pri_out2;
};

/**
 * Signals in message Tcm_Hs_Sec_In_Sp.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_tcm_hs_sec_in_sp_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float tcm_hs_sec_in_sp2;
};

/**
 * Signals in message FC_POWER_ACT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_act_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float fc_power_act;
};

/**
 * Signals in message FC_POWER_PERIPHERAL.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_peripheral_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float fc_power_peripheral;
};

/**
 * Signals in message FC_POWER_OPT.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_opt_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float fc_power_opt;
};

/**
 * Signals in message FC_POWER_MAX.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_max_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float fc_power_max;
};

/**
 * Signals in message FC_POWER_MAX_STATE.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_max_state_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_power_max_state : 16;
};

/**
 * Signals in message FC_POWER_MIN.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_min_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float fc_power_min;
};

/**
 * Signals in message EstimatedTimeToPower.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_estimated_time_to_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t estimated_time_to_power : 16;
};

/**
 * Signals in message EstimatedTimeForShutdown.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_estimated_time_for_shutdown_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t estimated_time_for_shutdown : 16;
};

/**
 * Signals in message FC_POWER_SP.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_power_sp_t {
    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float fc_power_sp;
};

/**
 * Signals in message FC_EVENT_CODE.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_event_code_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_event_code1 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_event_code2 : 16;
};

/**
 * Signals in message FC_EXTENDED_INFO.
 *
 * All signal values are as on the CAN bus.
 */
struct modbus_fc_extended_info_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_extended_info1 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_extended_info2 : 16;
};

/**
 * Pack message FC_DCDC_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_dcdc_status_pack(
    uint8_t *dst_p,
    const struct modbus_fc_dcdc_status_t *src_p);
/**
 * Unpack message FC_DCDC_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_dcdc_status_unpack(
    struct modbus_fc_dcdc_status_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_fc_dcdc_status_fc_dcdc_running_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_dcdc_status_fc_dcdc_running_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_fc_dcdc_status_fc_dcdc_failure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_dcdc_status_fc_dcdc_failure_decode(uint8_t value);


/**
 * Pack message DCDC_VOLTAGE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_voltage_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_voltage_t *src_p);
/**
 * Unpack message DCDC_VOLTAGE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_voltage_unpack(
    struct modbus_dcdc_voltage_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_voltage_dcdc_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_voltage_dcdc_voltage_decode(uint16_t value);


/**
 * Pack message FC_DCDC_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_dcdc_current_pack(
    uint8_t *dst_p,
    const struct modbus_fc_dcdc_current_t *src_p);
/**
 * Unpack message FC_DCDC_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_dcdc_current_unpack(
    struct modbus_fc_dcdc_current_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t modbus_fc_dcdc_current_fc_dcdc_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_dcdc_current_fc_dcdc_current_decode(int16_t value);


/**
 * Pack message FC_DCDC_POWER.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_dcdc_power_pack(
    uint8_t *dst_p,
    const struct modbus_fc_dcdc_power_t *src_p);
/**
 * Unpack message FC_DCDC_POWER.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_dcdc_power_unpack(
    struct modbus_fc_dcdc_power_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t modbus_fc_dcdc_power_fc_dcdc_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_dcdc_power_fc_dcdc_power_decode(int16_t value);


/**
 * Pack message FC_DCDC_POWER_LIMITATION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_dcdc_power_limitation_pack(
    uint8_t *dst_p,
    const struct modbus_fc_dcdc_power_limitation_t *src_p);
/**
 * Unpack message FC_DCDC_POWER_LIMITATION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_dcdc_power_limitation_unpack(
    struct modbus_fc_dcdc_power_limitation_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t modbus_fc_dcdc_power_limitation_fc_dcdc_power_limitation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_dcdc_power_limitation_fc_dcdc_power_limitation_decode(int16_t value);


/**
 * Pack message DCDC_COMMAND.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_command_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_command_t *src_p);
/**
 * Unpack message DCDC_COMMAND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_command_unpack(
    struct modbus_dcdc_command_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_dcdc_command_dcdc_reset2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_command_dcdc_reset2_decode(uint8_t value);


/**
 * Pack message FCSTACK_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fcstack_status_pack(
    uint8_t *dst_p,
    const struct modbus_fcstack_status_t *src_p);
/**
 * Unpack message FCSTACK_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fcstack_status_unpack(
    struct modbus_fcstack_status_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_fcstack_status_fcstack_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fcstack_status_fcstack_status_decode(uint8_t value);


/**
 * Pack message DCDC_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_status_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_status_t *src_p);
/**
 * Unpack message DCDC_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_status_unpack(
    struct modbus_dcdc_status_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_dcdc_status_dcdc_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_status_dcdc_status_decode(uint8_t value);


/**
 * Pack message DCDC_PWR_UNIT_TEMPERATURE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_pwr_unit_temperature_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_pwr_unit_temperature_t *src_p);
/**
 * Unpack message DCDC_PWR_UNIT_TEMPERATURE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_pwr_unit_temperature_unpack(
    struct modbus_dcdc_pwr_unit_temperature_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_pwr_unit_temperature_dcdc_pwr_unit_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_pwr_unit_temperature_dcdc_pwr_unit_temperature_decode(uint16_t value);


/**
 * Pack message DCDC_MAX_AVAILABLE_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_max_available_current_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_max_available_current_t *src_p);
/**
 * Unpack message DCDC_MAX_AVAILABLE_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_max_available_current_unpack(
    struct modbus_dcdc_max_available_current_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_max_available_current_dcdc_max_available_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_max_available_current_dcdc_max_available_current_decode(uint16_t value);


/**
 * Pack message DCDC_MAX_AVAILABLE_FC_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_max_available_fc_current_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_max_available_fc_current_t *src_p);
/**
 * Unpack message DCDC_MAX_AVAILABLE_FC_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_max_available_fc_current_unpack(
    struct modbus_dcdc_max_available_fc_current_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_max_available_fc_current_dcdc_max_available_fc_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_max_available_fc_current_dcdc_max_available_fc_current_decode(uint16_t value);


/**
 * Pack message DCDC_MAX_AVAILABLE_POWER.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_max_available_power_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_max_available_power_t *src_p);
/**
 * Unpack message DCDC_MAX_AVAILABLE_POWER.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_max_available_power_unpack(
    struct modbus_dcdc_max_available_power_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_max_available_power_dcdc_max_available_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_max_available_power_dcdc_max_available_power_decode(uint16_t value);


/**
 * Pack message FCSTACK_VOLTAGE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fcstack_voltage_pack(
    uint8_t *dst_p,
    const struct modbus_fcstack_voltage_t *src_p);
/**
 * Unpack message FCSTACK_VOLTAGE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fcstack_voltage_unpack(
    struct modbus_fcstack_voltage_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fcstack_voltage_fcstack_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fcstack_voltage_fcstack_voltage_decode(uint16_t value);


/**
 * Pack message FCSTACK_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fcstack_current_pack(
    uint8_t *dst_p,
    const struct modbus_fcstack_current_t *src_p);
/**
 * Unpack message FCSTACK_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fcstack_current_unpack(
    struct modbus_fcstack_current_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fcstack_current_fcstack_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fcstack_current_fcstack_current_decode(uint16_t value);


/**
 * Pack message DC_BUS_VOLTAGE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dc_bus_voltage_pack(
    uint8_t *dst_p,
    const struct modbus_dc_bus_voltage_t *src_p);
/**
 * Unpack message DC_BUS_VOLTAGE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dc_bus_voltage_unpack(
    struct modbus_dc_bus_voltage_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dc_bus_voltage_dc_bus_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dc_bus_voltage_dc_bus_voltage_decode(uint16_t value);


/**
 * Pack message DC_BUS_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dc_bus_current_pack(
    uint8_t *dst_p,
    const struct modbus_dc_bus_current_t *src_p);
/**
 * Unpack message DC_BUS_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dc_bus_current_unpack(
    struct modbus_dc_bus_current_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dc_bus_current_dc_bus_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dc_bus_current_dc_bus_current_decode(uint16_t value);


/**
 * Pack message Msg_30051.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_msg_30051_pack(
    uint8_t *dst_p,
    const struct modbus_msg_30051_t *src_p);
/**
 * Unpack message Msg_30051.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_msg_30051_unpack(
    struct modbus_msg_30051_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_msg_30051_dcdc_error_word_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_30051_dcdc_error_word_1_decode(uint16_t value);


/**
 * Pack message Msg_30052.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_msg_30052_pack(
    uint8_t *dst_p,
    const struct modbus_msg_30052_t *src_p);
/**
 * Unpack message Msg_30052.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_msg_30052_unpack(
    struct modbus_msg_30052_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_msg_30052_dcdc_error_word_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_30052_dcdc_error_word_2_decode(uint16_t value);


/**
 * Pack message Msg_30053.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_msg_30053_pack(
    uint8_t *dst_p,
    const struct modbus_msg_30053_t *src_p);
/**
 * Unpack message Msg_30053.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_msg_30053_unpack(
    struct modbus_msg_30053_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_msg_30053_dcdc_error_word_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_30053_dcdc_error_word_3_decode(uint16_t value);


/**
 * Pack message DCDC_WARNING_WORD_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_warning_word_1_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_warning_word_1_t *src_p);
/**
 * Unpack message DCDC_WARNING_WORD_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_warning_word_1_unpack(
    struct modbus_dcdc_warning_word_1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_warning_word_1_dcdc_warning_word_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_warning_word_1_dcdc_warning_word_1_decode(uint16_t value);


/**
 * Pack message DCDC_WARNING_WORD_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_warning_word_2_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_warning_word_2_t *src_p);
/**
 * Unpack message DCDC_WARNING_WORD_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_warning_word_2_unpack(
    struct modbus_dcdc_warning_word_2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_warning_word_2_dcdc_warning_word_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_warning_word_2_dcdc_warning_word_2_decode(uint16_t value);


/**
 * Pack message DCDC_WARNING_WORD_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_dcdc_warning_word_3_pack(
    uint8_t *dst_p,
    const struct modbus_dcdc_warning_word_3_t *src_p);
/**
 * Unpack message DCDC_WARNING_WORD_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_dcdc_warning_word_3_unpack(
    struct modbus_dcdc_warning_word_3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_dcdc_warning_word_3_dcdc_warning_word_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_dcdc_warning_word_3_dcdc_warning_word_3_decode(uint16_t value);


/**
 * Pack message Msg_30101.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_msg_30101_pack(
    uint8_t *dst_p,
    const struct modbus_msg_30101_t *src_p);
/**
 * Unpack message Msg_30101.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_msg_30101_unpack(
    struct modbus_msg_30101_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_msg_30101_dcdc_status_word_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_30101_dcdc_status_word_1_decode(uint16_t value);


/**
 * Pack message PowerCurrentMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_power_current_mode_pack(
    uint8_t *dst_p,
    const struct modbus_power_current_mode_t *src_p);
/**
 * Unpack message PowerCurrentMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_power_current_mode_unpack(
    struct modbus_power_current_mode_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_power_current_mode_power_current_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_power_current_mode_power_current_mode_decode(uint8_t value);


/**
 * Pack message PowerCurrentReference.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_power_current_reference_pack(
    uint8_t *dst_p,
    const struct modbus_power_current_reference_t *src_p);
/**
 * Unpack message PowerCurrentReference.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_power_current_reference_unpack(
    struct modbus_power_current_reference_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_power_current_reference_power_current_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_power_current_reference_power_current_reference_decode(uint8_t value);


/**
 * Pack message PowerCurrentMinHandling.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_power_current_min_handling_pack(
    uint8_t *dst_p,
    const struct modbus_power_current_min_handling_t *src_p);
/**
 * Unpack message PowerCurrentMinHandling.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_power_current_min_handling_unpack(
    struct modbus_power_current_min_handling_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_power_current_min_handling_power_current_min_handling_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_power_current_min_handling_power_current_min_handling_decode(uint8_t value);


/**
 * Pack message Msg_40204.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_msg_40204_pack(
    uint8_t *dst_p,
    const struct modbus_msg_40204_t *src_p);
/**
 * Unpack message Msg_40204.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_msg_40204_unpack(
    struct modbus_msg_40204_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_msg_40204_system_off_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_40204_system_off_request_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_msg_40204_fast_shutdown_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_40204_fast_shutdown_request_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_msg_40204_freeze_protection_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_40204_freeze_protection_request_decode(uint8_t value);


/**
 * Pack message Msg_30201.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_msg_30201_pack(
    uint8_t *dst_p,
    const struct modbus_msg_30201_t *src_p);
/**
 * Unpack message Msg_30201.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_msg_30201_unpack(
    struct modbus_msg_30201_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_msg_30201_mute_h2_sens_exhaust2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_30201_mute_h2_sens_exhaust2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_msg_30201_status_freeze_protection_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_msg_30201_status_freeze_protection_decode(uint8_t value);


/**
 * Pack message Pos_Mix_Valve.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_pos_mix_valve_pack(
    uint8_t *dst_p,
    const struct modbus_pos_mix_valve_t *src_p);
/**
 * Unpack message Pos_Mix_Valve.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_pos_mix_valve_unpack(
    struct modbus_pos_mix_valve_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t modbus_pos_mix_valve_pos_mix_valve2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_pos_mix_valve_pos_mix_valve2_decode(uint8_t value);


/**
 * Pack message Tcm_Hs_Pri_Out.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_tcm_hs_pri_out_pack(
    uint8_t *dst_p,
    const struct modbus_tcm_hs_pri_out_t *src_p);
/**
 * Unpack message Tcm_Hs_Pri_Out.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_tcm_hs_pri_out_unpack(
    struct modbus_tcm_hs_pri_out_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t modbus_tcm_hs_pri_out_tcm_hs_pri_out2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_tcm_hs_pri_out_tcm_hs_pri_out2_decode(int16_t value);


/**
 * Pack message Tcm_Hs_Sec_In_Sp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_tcm_hs_sec_in_sp_pack(
    uint8_t *dst_p,
    const struct modbus_tcm_hs_sec_in_sp_t *src_p);
/**
 * Unpack message Tcm_Hs_Sec_In_Sp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_tcm_hs_sec_in_sp_unpack(
    struct modbus_tcm_hs_sec_in_sp_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t modbus_tcm_hs_sec_in_sp_tcm_hs_sec_in_sp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_tcm_hs_sec_in_sp_tcm_hs_sec_in_sp2_decode(int16_t value);


/**
 * Pack message FC_POWER_ACT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_act_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_act_t *src_p);
/**
 * Unpack message FC_POWER_ACT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_act_unpack(
    struct modbus_fc_power_act_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_act_fc_power_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_act_fc_power_act_decode(uint16_t value);


/**
 * Pack message FC_POWER_PERIPHERAL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_peripheral_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_peripheral_t *src_p);
/**
 * Unpack message FC_POWER_PERIPHERAL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_peripheral_unpack(
    struct modbus_fc_power_peripheral_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_peripheral_fc_power_peripheral_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_peripheral_fc_power_peripheral_decode(uint16_t value);


/**
 * Pack message FC_POWER_OPT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_opt_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_opt_t *src_p);
/**
 * Unpack message FC_POWER_OPT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_opt_unpack(
    struct modbus_fc_power_opt_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_opt_fc_power_opt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_opt_fc_power_opt_decode(uint16_t value);


/**
 * Pack message FC_POWER_MAX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_max_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_max_t *src_p);
/**
 * Unpack message FC_POWER_MAX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_max_unpack(
    struct modbus_fc_power_max_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_max_fc_power_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_max_fc_power_max_decode(uint16_t value);


/**
 * Pack message FC_POWER_MAX_STATE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_max_state_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_max_state_t *src_p);
/**
 * Unpack message FC_POWER_MAX_STATE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_max_state_unpack(
    struct modbus_fc_power_max_state_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_max_state_fc_power_max_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_max_state_fc_power_max_state_decode(uint16_t value);


/**
 * Pack message FC_POWER_MIN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_min_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_min_t *src_p);
/**
 * Unpack message FC_POWER_MIN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_min_unpack(
    struct modbus_fc_power_min_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_min_fc_power_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_min_fc_power_min_decode(uint16_t value);


/**
 * Pack message EstimatedTimeToPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_estimated_time_to_power_pack(
    uint8_t *dst_p,
    const struct modbus_estimated_time_to_power_t *src_p);
/**
 * Unpack message EstimatedTimeToPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_estimated_time_to_power_unpack(
    struct modbus_estimated_time_to_power_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_estimated_time_to_power_estimated_time_to_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_estimated_time_to_power_estimated_time_to_power_decode(uint16_t value);


/**
 * Pack message EstimatedTimeForShutdown.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_estimated_time_for_shutdown_pack(
    uint8_t *dst_p,
    const struct modbus_estimated_time_for_shutdown_t *src_p);
/**
 * Unpack message EstimatedTimeForShutdown.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_estimated_time_for_shutdown_unpack(
    struct modbus_estimated_time_for_shutdown_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_estimated_time_for_shutdown_estimated_time_for_shutdown_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_estimated_time_for_shutdown_estimated_time_for_shutdown_decode(uint16_t value);


/**
 * Pack message FC_POWER_SP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_power_sp_pack(
    uint8_t *dst_p,
    const struct modbus_fc_power_sp_t *src_p);
/**
 * Unpack message FC_POWER_SP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_power_sp_unpack(
    struct modbus_fc_power_sp_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_power_sp_fc_power_sp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_power_sp_fc_power_sp_decode(uint16_t value);


/**
 * Pack message FC_EVENT_CODE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_event_code_pack(
    uint8_t *dst_p,
    const struct modbus_fc_event_code_t *src_p);
/**
 * Unpack message FC_EVENT_CODE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_event_code_unpack(
    struct modbus_fc_event_code_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_event_code_fc_event_code1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_event_code_fc_event_code1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_event_code_fc_event_code2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_event_code_fc_event_code2_decode(uint16_t value);


/**
 * Pack message FC_EXTENDED_INFO.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int modbus_fc_extended_info_pack(
    uint8_t *dst_p,
    const struct modbus_fc_extended_info_t *src_p);
/**
 * Unpack message FC_EXTENDED_INFO.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int modbus_fc_extended_info_unpack(
    struct modbus_fc_extended_info_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_extended_info_fc_extended_info1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_extended_info_fc_extended_info1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t modbus_fc_extended_info_fc_extended_info2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float modbus_fc_extended_info_fc_extended_info2_decode(uint16_t value);



#ifdef __cplusplus
}
#endif

#endif
