/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.4.12 Tue Aug  2 15:22:18 2022.
 */

#ifndef CANTOOLS_H
#define CANTOOLS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <assert.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#ifdef __TMS320C2000__
 #define uint8_t uint16_t
 #define int8_t int16_t
#endif

/* Frame ids. */
#define CANTOOLS_ISO_TP_REQUEST_FRAME_ID (0x7b0u)
#define CANTOOLS_ISO_TP_RESPONSE_VMS_FRAME_ID (0x7c5u)
#define CANTOOLS_RX_PDO1_FRAME_ID (0x210u)
#define CANTOOLS_TX_PDO1_FRAME_ID (0x190u)
#define CANTOOLS_TX_PDO2_FRAME_ID (0x290u)
#define CANTOOLS_TX_PDO3_FRAME_ID (0x390u)
#define CANTOOLS_TX_PDO4_FRAME_ID (0x490u)
#define CANTOOLS_TX_PDO1_VN1_FRAME_ID (0x192u)
#define CANTOOLS_RX_PDO1_PC_FRAME_ID (0x211u)
#define CANTOOLS_TX_PDO1_PC_FRAME_ID (0x191u)
#define CANTOOLS_TX_SDO1_FRAME_ID (0x590u)
#define CANTOOLS_DC_DC1_FRAME_ID (0x80u)
#define CANTOOLS_RX_SDO1_FRAME_ID (0x610u)
#define CANTOOLS_DC_DC2_FRAME_ID (0x81u)
#define CANTOOLS_DC_DC3_FRAME_ID (0x82u)
#define CANTOOLS_DC_DC4_FRAME_ID (0x83u)
#define CANTOOLS_DC_DC_CTRL1_FRAME_ID (0x61u)
#define CANTOOLS_DC_DC_CTRL2_FRAME_ID (0x62u)
#define CANTOOLS_DC_DC_CTRL3_FRAME_ID (0x63u)
#define CANTOOLS_DC_DC_STA1_FRAME_ID (0x121u)
#define CANTOOLS_DC_DC_STA2_FRAME_ID (0x122u)
#define CANTOOLS_DC_DC_STA3_FRAME_ID (0x123u)
#define CANTOOLS_DC_DC_STA5_FRAME_ID (0x125u)
#define CANTOOLS_DC_DC_STA6_FRAME_ID (0x126u)
#define CANTOOLS_DC_DC_STA1B_FRAME_ID (0x131u)
#define CANTOOLS_DC_DC_STA2B_FRAME_ID (0x132u)
#define CANTOOLS_DC_DC_STA3B_FRAME_ID (0x133u)
#define CANTOOLS_DC_DC_STA5B_FRAME_ID (0x135u)
#define CANTOOLS_DC_DC_STA6B_FRAME_ID (0x136u)
#define CANTOOLS_TX_SDO2_FRAME_ID (0x591u)
#define CANTOOLS_TX_SDO3_FRAME_ID (0x592u)
#define CANTOOLS_RX_SDO2_FRAME_ID (0x611u)
#define CANTOOLS_RX_SDO3_FRAME_ID (0x612u)

/* Frame lengths in bytes. */
#define CANTOOLS_ISO_TP_REQUEST_LENGTH (8u)
#define CANTOOLS_ISO_TP_RESPONSE_VMS_LENGTH (8u)
#define CANTOOLS_RX_PDO1_LENGTH (8u)
#define CANTOOLS_TX_PDO1_LENGTH (8u)
#define CANTOOLS_TX_PDO2_LENGTH (8u)
#define CANTOOLS_TX_PDO3_LENGTH (8u)
#define CANTOOLS_TX_PDO4_LENGTH (8u)
#define CANTOOLS_TX_PDO1_VN1_LENGTH (8u)
#define CANTOOLS_RX_PDO1_PC_LENGTH (8u)
#define CANTOOLS_TX_PDO1_PC_LENGTH (8u)
#define CANTOOLS_TX_SDO1_LENGTH (1u)
#define CANTOOLS_DC_DC1_LENGTH (8u)
#define CANTOOLS_RX_SDO1_LENGTH (1u)
#define CANTOOLS_DC_DC2_LENGTH (8u)
#define CANTOOLS_DC_DC3_LENGTH (8u)
#define CANTOOLS_DC_DC4_LENGTH (8u)
#define CANTOOLS_DC_DC_CTRL1_LENGTH (8u)
#define CANTOOLS_DC_DC_CTRL2_LENGTH (8u)
#define CANTOOLS_DC_DC_CTRL3_LENGTH (8u)
#define CANTOOLS_DC_DC_STA1_LENGTH (8u)
#define CANTOOLS_DC_DC_STA2_LENGTH (8u)
#define CANTOOLS_DC_DC_STA3_LENGTH (8u)
#define CANTOOLS_DC_DC_STA5_LENGTH (8u)
#define CANTOOLS_DC_DC_STA6_LENGTH (8u)
#define CANTOOLS_DC_DC_STA1B_LENGTH (8u)
#define CANTOOLS_DC_DC_STA2B_LENGTH (8u)
#define CANTOOLS_DC_DC_STA3B_LENGTH (8u)
#define CANTOOLS_DC_DC_STA5B_LENGTH (8u)
#define CANTOOLS_DC_DC_STA6B_LENGTH (8u)
#define CANTOOLS_TX_SDO2_LENGTH (1u)
#define CANTOOLS_TX_SDO3_LENGTH (1u)
#define CANTOOLS_RX_SDO2_LENGTH (1u)
#define CANTOOLS_RX_SDO3_LENGTH (1u)

/* Extended or standard frame types. */
#define CANTOOLS_ISO_TP_REQUEST_IS_EXTENDED (0)
#define CANTOOLS_ISO_TP_RESPONSE_VMS_IS_EXTENDED (0)
#define CANTOOLS_RX_PDO1_IS_EXTENDED (0)
#define CANTOOLS_TX_PDO1_IS_EXTENDED (0)
#define CANTOOLS_TX_PDO2_IS_EXTENDED (0)
#define CANTOOLS_TX_PDO3_IS_EXTENDED (0)
#define CANTOOLS_TX_PDO4_IS_EXTENDED (0)
#define CANTOOLS_TX_PDO1_VN1_IS_EXTENDED (0)
#define CANTOOLS_RX_PDO1_PC_IS_EXTENDED (0)
#define CANTOOLS_TX_PDO1_PC_IS_EXTENDED (0)
#define CANTOOLS_TX_SDO1_IS_EXTENDED (0)
#define CANTOOLS_DC_DC1_IS_EXTENDED (0)
#define CANTOOLS_RX_SDO1_IS_EXTENDED (0)
#define CANTOOLS_DC_DC2_IS_EXTENDED (0)
#define CANTOOLS_DC_DC3_IS_EXTENDED (0)
#define CANTOOLS_DC_DC4_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_CTRL1_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_CTRL2_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_CTRL3_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA1_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA2_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA3_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA5_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA6_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA1B_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA2B_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA3B_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA5B_IS_EXTENDED (0)
#define CANTOOLS_DC_DC_STA6B_IS_EXTENDED (0)
#define CANTOOLS_TX_SDO2_IS_EXTENDED (0)
#define CANTOOLS_TX_SDO3_IS_EXTENDED (0)
#define CANTOOLS_RX_SDO2_IS_EXTENDED (0)
#define CANTOOLS_RX_SDO3_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
/* RX/TX MESSAGE */
#define CANTOOLS_ISO_TP_REQUEST_CYCLE_TIME_MS (0u)
#define CANTOOLS_ISO_TP_RESPONSE_VMS_CYCLE_TIME_MS (0u)
#define CANTOOLS_RX_PDO1_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_PDO1_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_PDO2_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_PDO3_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_PDO4_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_PDO1_VN1_CYCLE_TIME_MS (0u)
#define CANTOOLS_RX_PDO1_PC_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_PDO1_PC_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_SDO1_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC1_CYCLE_TIME_MS (0u)
#define CANTOOLS_RX_SDO1_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC2_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC3_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC4_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_CTRL1_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_CTRL2_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_CTRL3_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA1_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA2_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA3_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA5_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA6_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA1B_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA2B_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA3B_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA5B_CYCLE_TIME_MS (0u)
#define CANTOOLS_DC_DC_STA6B_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_SDO2_CYCLE_TIME_MS (0u)
#define CANTOOLS_TX_SDO3_CYCLE_TIME_MS (0u)
#define CANTOOLS_RX_SDO2_CYCLE_TIME_MS (0u)
#define CANTOOLS_RX_SDO3_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_BOOTING__SETUP_CHOICE (0u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_MAINTENANCE_CHOICE (10u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_STANDBY_CHOICE (20u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_START_UP_CHOICE (30u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_OPERATION_CHOICE (40u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_SHUTDOWN_CHOICE (50u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_ERROR_SHUTDOWN_CHOICE (52u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_EMCY_SHUTDOWN_CHOICE (54u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_STOP_CHOICE (60u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_ERROR_CHOICE (62u)
#define CANTOOLS_TX_PDO1_TX_PDO1_SYSTEM_STATE_READY4_OFF_CHOICE (70u)

enum enum_tx_pdo1_system_state_t {
    QT_BOOTING__SETUP = 0,
    QT_MAINTENANCE = 10,
    QT_STANDBY = 20,
    QT_START_UP = 30,
    QT_OPERATION = 40,
    QT_SHUTDOWN = 50,
    QT_ERROR_SHUTDOWN = 52,
    QT_EMCY_SHUTDOWN = 54,
    QT_STOP = 60,
    QT_ERROR = 62,
    QT_READY4_OFF = 70,
};

#define CANTOOLS_TX_SDO1_TX_SDO_POWER_CURRENT_MODE_CURRENT_CHOICE (0u)
#define CANTOOLS_TX_SDO1_TX_SDO_POWER_CURRENT_MODE_POWER_CHOICE (1u)

enum enum_tx_sdo_power_current_mode_t {
    QT_CURRENT = 0,
    QT_POWER = 1,
};

#define CANTOOLS_TX_SDO2_TX_SDO_POWER_CURRENT_REFERENCE_DCXC_INPUT_CHOICE (0u)
#define CANTOOLS_TX_SDO2_TX_SDO_POWER_CURRENT_REFERENCE_DCXC_OUTPUT_CHOICE (1u)

enum enum_tx_sdo_power_current_reference_t {
    QT_DCXC_INPUT = 0,
    QT_DCXC_OUTPUT = 1,
};


/**
 * Signals in message IsoTpRequest.
 *
 * KWP2000 request
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_iso_tp_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data0 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data1 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data2 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data3 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data4 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data5 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data6 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data7 : 8;
};

/**
 * Signals in message IsoTpResponseVMS.
 *
 * KWP2000 response
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_iso_tp_response_vms_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_01 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_02 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_03 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_04 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_05 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_06 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_07 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_08 : 8;
};

/**
 * Signals in message RxPDO1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_rx_pdo1_t {
    /**
     * maximum power limit from PMS
     *
     * Range: 0..7100 (0..71 kW)
     * Scale: 0.01
     * Offset: 0
     */
    float rx_pdo1_power_current_max;

    /**
     * Complete stop/shutdown of system and peripheral supplies.
     * 0-System will stay alive
     * 1-System will shut down and go OFF
     *
     * Range: 0..1 (0..1 )
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_pdo1_system_off_request : 1;

    /**
     * 0-No request
     * 1-If in SystemState �Operation� the power/current output will be very fast de-creased to zero. Afterwards the system will shut down.
     *
     * Range: 0..1 (0..1 )
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_pdo1_fast_shutdown_request : 1;

    /**
     * 0-No request
     * 1-When set while system is in SystemState �Operation� and kept active until SystemState changed to �Shutdown� then a special shut-down will be activated to get System into a freeze protected state.
     *
     * Range: 0..1 (0..1 )
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_pdo1_freeze_protectio_request : 1;

    /**
     * 0 = normal, 1 = perform reset (fault acknowledge) action
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_reset : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_pdo1_spare1 : 4;

    /**
     * Should be 0 at the moment. Reserved for future
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_pdo1_maintenance_cmd : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rx_pdo1_spare2 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rx_pdo1_spare3 : 16;
};

/**
 * Signals in message TxPDO1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_pdo1_t {
    /**
     * While SystemState is not �Operation�, this value predicts time in seconds [s] until Sys-temState reaches �Operation�.
     * When in SystemState �Operation� this value predicts time needed to reach set point.
     * If value is zero (=0) no prediction available or state/set point already reached.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo1_estimated_time_to_power : 16;

    /**
     * This value predicts time in seconds [s] needed for system shutdown (Time within SystemStates �Shutdown�, �EmcyShut-down�, �ErrorShutdown�).
     * If value is zero (=0) no prediction available or shutdown already completed.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo1_estimated_time_for_shutdown : 16;

    /**
     * System state
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    enum enum_tx_pdo1_system_state_t tx_pdo1_system_state : 8;

    /**
     * Additional information what is actually done in actual SystemState. Sometimes specified in customer specific project documentation.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tx_pdo1_system_sub_state : 4;

    /**
     * Status signal if system is actually freeze pro-tected
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tx_pdo1_status_freeze_protection : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tx_pdo1_spare1 : 3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo1_spare2 : 16;
};

/**
 * Signals in message TxPDO2.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_pdo2_t {
    /**
     * Event code
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo2_event_code_a : 16;

    /**
     * Event code
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo2_event_code_b : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo2_extended_info_a : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo2_extended_info_b : 16;
};

/**
 * Signals in message TxPDO3.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_pdo3_t {
    /**
     * Power/current the system is providing at the moment. Resolution/Unit is same as PowerCurrentSp (dependent on SysConfig)
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float tx_pdo3_power_current_act;

    /**
     * Information about power/current (depending on PowerCurrentMode/ PowerCurrentReference) the system is consuming for operation at the moment.
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float tx_pdo3_power_current_peripheral;

    /**
     * Optimal power/current for best efficiency.
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float tx_pdo3_power_current_opt;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo3_spare1 : 16;
};

/**
 * Signals in message TxPDO4.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_pdo4_t {
    /**
     * Maximum power/current the system is able to pro-vide at the moment. Resolution/Unit is same as PowerCurrentSp (dependent on SysConfig)
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float tx_pdo4_power_current_max;

    /**
     * Status information about PowerCurrentMax
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo4_power_current_max_state : 16;

    /**
     * Minimum power/current the system is able to pro-vide at the moment. Resolution/Unit is same as PowerCurrentSp (dependent on SysConfig)
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float tx_pdo4_power_current_min;

    /**
     * Status information about PowerCurrentMin
     * (reserved for future use)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo4_power_current_min_state : 16;
};

/**
 * Signals in message TxPDO1_VN1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_pdo1_vn1_t {
    /**
     * Position of cooling medium mix valve in percent [%]. 0% is internal cooling loop active (no thermic energy output to customer) and 100% is complete volume flow (thermic energy) transferred to plate heat exchanger.
     * A value of 255 means no information available.
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pos_mix_valve : 8;

    /**
     * Temperature cool medium heat sink primary (fuel cell loop) output side (TT34) actual value. Resolu-tion is 0.1�C per digit. Unit is degree Celsius (�C).
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float tcm_hs_pri_out;

    /**
     * Temperature cool medium heat sink secondary (customer loop) output side set point. Resolution is 0.1�C per digit. Unit is degree Celsius (�C).
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float tcm_hs_sec_in_sp;

    /**
     * 0 = Sensor signal used for safety shutdown
     * 1 = Sensor signal should be muted (no air volume flow -> no mixing purge gas with air -> high concen-trations operationally possible.
     * For safety reasons while this signal is active (=1) gas supply can be closed by customer.
     *
     * Range: 0..1 (0..1 )
     * Scale: 1
     * Offset: 0
     */
    uint8_t mute_h2_sens_exhaust : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tx_pdo1_vn1_spare1 : 7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo1_vn1_spare2 : 16;
};

/**
 * Signals in message RxPDO1_PC.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_rx_pdo1_pc_t {
    /**
     * DCDC Measured current at Fc side in 0.1 A steps. If not supported, set to 0xFFFF.
     *
     * Range: 0..5460 (0..546 A)
     * Scale: 0.1
     * Offset: 0
     */
    float dcxc_current_fc_side;

    /**
     * Measured voltage at Fc side in 0.1 V steps. If not supported, set to 0xFFFF.
     *
     * Range: 0..3310 (0..331 V)
     * Scale: 0.1
     * Offset: 0
     */
    float dcxc_voltage_fc_side;

    /**
     * Measured current at Link side in 0.01 A steps. If not supported, set to 0xFFFF
     *
     * Range: 0..12000 (0..120 A)
     * Scale: 0.01
     * Offset: 0
     */
    float dcxc_current_link_side;

    /**
     * Measured voltage at Link side in 0.1 V steps. If not supported, set to 0xFFFF
     *
     * Range: 0..8020 (0..802 V)
     * Scale: 0.1
     * Offset: 0
     */
    float dcxc_voltage_link_side;
};

/**
 * Signals in message TxPDO1_PC.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_pdo1_pc_t {
    /**
     * Current set point in steps of 0.1 A This set point needs to become active without any ramps within a delay of not more than 50 ms. The PM system control already generates opti-mized ramps internally.
     *
     * Range: 0..5000 (0..500 A)
     * Scale: 0.1
     * Offset: 0
     */
    float dcxc_current_sp;

    /**
     * 0 � Disconnected; 10 � Precharge (minus connected, small current supplied); 20 � Active (minus and plus contactors closed)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcxc_connection_state : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tx_pdo1_pc_spare1 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo1_pc_spare2 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tx_pdo1_pc_spare3 : 16;
};

/**
 * Signals in message TxSDO1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_sdo1_t {
    /**
     * 0: Current request
     * 1: Power request
     * 2-255: reserved
     * Can only be changed in SystemState �Standby�
     * Default: 1
     *
     * Range: 0..1 (0..1 )
     * Scale: 1
     * Offset: 0
     */
    enum enum_tx_sdo_power_current_mode_t tx_sdo_power_current_mode : 8;
};

/**
 * Signals in message DcDc1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc1_running : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc1_failure : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc1_spare1 : 6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc1_status : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc1_status_word1 : 16;

    /**
     * DCDC actual power
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float dc_dc1_power_act;

    /**
     * pwr setpoint sent to the FC by the DCDC (interpreted Analog in)
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    float dc_dc1_spare3;
};

/**
 * Signals in message RxSDO1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_rx_sdo1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_sdo_power_current_mode : 8;
};

/**
 * Signals in message DcDc2.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc2_pwr_unit_temp;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc2_max_avlb_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc2_spare1 : 16;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    float dc_dc2_max_avlb_pwr;
};

/**
 * Signals in message DcDc3.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc3_err_word1 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc3_err_word2 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc3_err_word3 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc3_err_word4 : 16;
};

/**
 * Signals in message DcDc4.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc4_warn_word1 : 16;

    /**
     * not used, spare
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc4_warn_word2 : 16;

    /**
     * not used, spare
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc4_warn_word3 : 16;

    /**
     * not used, spare
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc4_warn_word4 : 16;
};

/**
 * Signals in message DcDcCtrl1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_ctrl1_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl1_main_sp;

    /**
     * Range: 1..4 (1..4 )
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_ctrl1_main_mode : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_ctrl1_en : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_ctrl1_rele_out : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_ctrl1_span1 : 6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_ctrl1_fault_ack : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_ctrl1_rele_in : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_ctrl1_on : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_ctrl1_span2 : 5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_ctrl1_span3 : 8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dcdc_ctrl1_span4 : 16;
};

/**
 * Signals in message DcDcCtrl2.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_ctrl2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl2_ils_max;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl2_ils_min;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl2_uls_max;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl2_uls_min;
};

/**
 * Signals in message DcDcCtrl3.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_ctrl3_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl3_ihs_max;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl3_ihs_min;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl3_uhs_max;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_ctrl3_uhs_min;
};

/**
 * Signals in message DcDcSta1.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uhs_lim_min : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uhs_lim_max : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ihs_lim_min : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ihs_lim_max : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uls_lim_min : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uls_lim_max : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ils_lim_min : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ils_lim_max : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_err : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_warn : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rdy : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_run : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_fan_act : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare3 : 1;

    /**
     * Range: 200..1000 (20..100 Celsius)
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta1_t_pow_unit;

    /**
     * Range: 0..2500 (0..250 A)
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta1_cur_avlbl;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rele_1_fbk : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rele_2_fbk : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rele_3_fbk : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ls_pre_charge_fbk : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_hs_pre_charge_fbk : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare4 : 3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rol_cnt : 8;
};

/**
 * Signals in message DcDcSta2.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_ils_act;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_ihs_act;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_uls_act;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_uhs_act;
};

/**
 * Signals in message DcDcSta3.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_err_wrd1 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_err_wrd2 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_warn_wrd1 : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_warn_wrd2 : 16;
};

/**
 * Signals in message DcDcSta5.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta5_t {
    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp1 : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp2 : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp3 : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp4 : 8;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta5_uls_est_act;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta5_uhs_est_act;
};

/**
 * Signals in message DcDcSta6.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta6_t {
    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp1 : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp2 : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp3 : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp4 : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp1 : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp2 : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp3 : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp4 : 8;
};

/**
 * Signals in message DcDcSta1b.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta1b_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uhs_lim_min_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uhs_lim_max_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ihs_lim_min_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ihs_lim_max_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uls_lim_min_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_uls_lim_max_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ils_lim_min_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ils_lim_max_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_err_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_warn_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rdy_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_run_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare1_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare2_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_fan_act_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare3_b : 1;

    /**
     * Range: 200..1000 (20..100 Celsius)
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta1_t_pow_unit_b;

    /**
     * Range: 0..2500 (0..250 A)
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta1_cur_avlbl_b;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rele_1_fbk_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rele_2_fbk_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rele_3_fbk_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_ls_pre_charge_fbk_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_hs_pre_charge_fbk_b : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_spare4_b : 3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta1_rol_cnt_b : 8;
};

/**
 * Signals in message DcDcSta2b.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta2b_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_ils_act_b;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_ihs_act_b;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_uls_act_b;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta2_uhs_act_b;
};

/**
 * Signals in message DcDcSta3b.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta3b_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_err_wrd1_b : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_err_wrd2_b : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_warn_wrd1_b : 16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_dc_sta3_warn_wrd2_b : 16;
};

/**
 * Signals in message DcDcSta5b.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta5b_t {
    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp1_b : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp2_b : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp3_b : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta5_trafo_temp4_b : 8;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta5_uls_est_act_b;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    float dc_dc_sta5_uhs_est_act_b;
};

/**
 * Signals in message DcDcSta6b.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_dc_dc_sta6b_t {
    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp1_b : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp2_b : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp3_b : 8;

    /**
     * Range: 40..140 (40..140 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_ind_temp4_b : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp1_b : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp2_b : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp3_b : 8;

    /**
     * Range: 20..100 (20..100 Celsius)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_dc_sta6_pcb_temp4_b : 8;
};

/**
 * Signals in message TxSDO2.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_sdo2_t {
    /**
     * 0: DCXC input (Fuel Cell Stack side)
     * 1: DCXC output (XC-Link side)
     * 2-255: Reserved
     * Can only be changed in SystemState �Standby�
     * Default: 0
     *
     * Range: 0..1 (0..1 )
     * Scale: 1
     * Offset: 0
     */
    enum enum_tx_sdo_power_current_reference_t tx_sdo_power_current_reference : 8;
};

/**
 * Signals in message TxSDO3.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_tx_sdo3_t {
    /**
     * 0: When PowerCurrentSp is below PowerCurrentMin then PowerCur-rentSp is set to PowerCurrentMin in-ternally.
     * ? System may deliver more power/current than requested by cus-tomer.
     * 1: When PowerCurrentSp is below PowerCurrentMin, the system will switch to SystemState �ShutDown�.
     * Default: 0
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tx_sdo_power_current_min_handling : 8;
};

/**
 * Signals in message RxSDO2.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_rx_sdo2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_sdo_power_current_reference : 8;
};

/**
 * Signals in message RxSDO3.
 *
 * All signal values are as on the CAN bus.
 */
struct cantools_rx_sdo3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_sdo_power_current_min_handling : 8;
};

/**
 * Pack message IsoTpRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_iso_tp_request_pack(
    uint8_t *dst_p,
    const struct cantools_iso_tp_request_t *src_p);
/**
 * Unpack message IsoTpRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_iso_tp_request_unpack(
    struct cantools_iso_tp_request_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data0_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data3_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data4_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data5_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data6_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_request_data7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_request_data7_decode(uint8_t value);


/**
 * Pack message IsoTpResponseVMS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_iso_tp_response_vms_pack(
    uint8_t *dst_p,
    const struct cantools_iso_tp_response_vms_t *src_p);
/**
 * Unpack message IsoTpResponseVMS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_iso_tp_response_vms_unpack(
    struct cantools_iso_tp_response_vms_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_01_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_01_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_02_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_02_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_03_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_03_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_04_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_04_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_05_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_05_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_06_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_06_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_07_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_07_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_iso_tp_response_vms_data_08_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_iso_tp_response_vms_data_08_decode(uint8_t value);


/**
 * Pack message RxPDO1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_rx_pdo1_pack(
    uint8_t *dst_p,
    const struct cantools_rx_pdo1_t *src_p);
/**
 * Unpack message RxPDO1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_rx_pdo1_unpack(
    struct cantools_rx_pdo1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_rx_pdo1_power_current_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_power_current_max_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_pdo1_rx_pdo1_system_off_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_system_off_request_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_pdo1_rx_pdo1_fast_shutdown_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_fast_shutdown_request_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_pdo1_rx_pdo1_freeze_protectio_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_freeze_protectio_request_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_pdo1_dcdc_reset_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_dcdc_reset_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_pdo1_rx_pdo1_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_spare1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_pdo1_rx_pdo1_maintenance_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_maintenance_cmd_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_rx_pdo1_spare2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_spare2_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_rx_pdo1_spare3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_rx_pdo1_spare3_decode(uint16_t value);


/**
 * Pack message TxPDO1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_pdo1_pack(
    uint8_t *dst_p,
    const struct cantools_tx_pdo1_t *src_p);
/**
 * Unpack message TxPDO1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_pdo1_unpack(
    struct cantools_tx_pdo1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_tx_pdo1_estimated_time_to_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_estimated_time_to_power_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_tx_pdo1_estimated_time_for_shutdown_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_estimated_time_for_shutdown_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_tx_pdo1_system_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_system_state_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_tx_pdo1_system_sub_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_system_sub_state_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_tx_pdo1_status_freeze_protection_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_status_freeze_protection_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_tx_pdo1_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_spare1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_tx_pdo1_spare2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_tx_pdo1_spare2_decode(uint16_t value);


/**
 * Pack message TxPDO2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_pdo2_pack(
    uint8_t *dst_p,
    const struct cantools_tx_pdo2_t *src_p);
/**
 * Unpack message TxPDO2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_pdo2_unpack(
    struct cantools_tx_pdo2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo2_tx_pdo2_event_code_a_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo2_tx_pdo2_event_code_a_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo2_tx_pdo2_event_code_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo2_tx_pdo2_event_code_b_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo2_tx_pdo2_extended_info_a_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo2_tx_pdo2_extended_info_a_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo2_tx_pdo2_extended_info_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo2_tx_pdo2_extended_info_b_decode(uint16_t value);


/**
 * Pack message TxPDO3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_pdo3_pack(
    uint8_t *dst_p,
    const struct cantools_tx_pdo3_t *src_p);
/**
 * Unpack message TxPDO3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_pdo3_unpack(
    struct cantools_tx_pdo3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo3_tx_pdo3_power_current_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo3_tx_pdo3_power_current_act_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo3_tx_pdo3_power_current_peripheral_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo3_tx_pdo3_power_current_peripheral_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo3_tx_pdo3_power_current_opt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo3_tx_pdo3_power_current_opt_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo3_tx_pdo3_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo3_tx_pdo3_spare1_decode(uint16_t value);


/**
 * Pack message TxPDO4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_pdo4_pack(
    uint8_t *dst_p,
    const struct cantools_tx_pdo4_t *src_p);
/**
 * Unpack message TxPDO4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_pdo4_unpack(
    struct cantools_tx_pdo4_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo4_tx_pdo4_power_current_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo4_tx_pdo4_power_current_max_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo4_tx_pdo4_power_current_max_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo4_tx_pdo4_power_current_max_state_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo4_tx_pdo4_power_current_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo4_tx_pdo4_power_current_min_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo4_tx_pdo4_power_current_min_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo4_tx_pdo4_power_current_min_state_decode(uint16_t value);


/**
 * Pack message TxPDO1_VN1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_pdo1_vn1_pack(
    uint8_t *dst_p,
    const struct cantools_tx_pdo1_vn1_t *src_p);
/**
 * Unpack message TxPDO1_VN1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_pdo1_vn1_unpack(
    struct cantools_tx_pdo1_vn1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_vn1_pos_mix_valve_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_vn1_pos_mix_valve_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_tx_pdo1_vn1_tcm_hs_pri_out_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_vn1_tcm_hs_pri_out_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_tx_pdo1_vn1_tcm_hs_sec_in_sp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_vn1_tcm_hs_sec_in_sp_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_vn1_mute_h2_sens_exhaust_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_vn1_mute_h2_sens_exhaust_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_vn1_tx_pdo1_vn1_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_vn1_tx_pdo1_vn1_spare1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_vn1_tx_pdo1_vn1_spare2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_vn1_tx_pdo1_vn1_spare2_decode(uint16_t value);


/**
 * Pack message RxPDO1_PC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_rx_pdo1_pc_pack(
    uint8_t *dst_p,
    const struct cantools_rx_pdo1_pc_t *src_p);
/**
 * Unpack message RxPDO1_PC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_rx_pdo1_pc_unpack(
    struct cantools_rx_pdo1_pc_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_pc_dcxc_current_fc_side_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_pc_dcxc_current_fc_side_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_pc_dcxc_voltage_fc_side_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_pc_dcxc_voltage_fc_side_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_pc_dcxc_current_link_side_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_pc_dcxc_current_link_side_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_rx_pdo1_pc_dcxc_voltage_link_side_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_pdo1_pc_dcxc_voltage_link_side_decode(uint16_t value);


/**
 * Pack message TxPDO1_PC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_pdo1_pc_pack(
    uint8_t *dst_p,
    const struct cantools_tx_pdo1_pc_t *src_p);
/**
 * Unpack message TxPDO1_PC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_pdo1_pc_unpack(
    struct cantools_tx_pdo1_pc_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_pc_dcxc_current_sp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_pc_dcxc_current_sp_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_pc_dcxc_connection_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_pc_dcxc_connection_state_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_pdo1_pc_tx_pdo1_pc_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_pc_tx_pdo1_pc_spare1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_pc_tx_pdo1_pc_spare2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_pc_tx_pdo1_pc_spare2_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_tx_pdo1_pc_tx_pdo1_pc_spare3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_pdo1_pc_tx_pdo1_pc_spare3_decode(uint16_t value);


/**
 * Pack message TxSDO1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_sdo1_pack(
    uint8_t *dst_p,
    const struct cantools_tx_sdo1_t *src_p);
/**
 * Unpack message TxSDO1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_sdo1_unpack(
    struct cantools_tx_sdo1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_sdo1_tx_sdo_power_current_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_sdo1_tx_sdo_power_current_mode_decode(uint8_t value);


/**
 * Pack message DcDc1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc1_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc1_t *src_p);
/**
 * Unpack message DcDc1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc1_unpack(
    struct cantools_dc_dc1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc1_dc_dc1_running_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_running_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc1_dc_dc1_failure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_failure_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc1_dc_dc1_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_spare1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc1_dc_dc1_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_status_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc1_dc_dc1_status_word1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_status_word1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc1_dc_dc1_power_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_power_act_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc1_dc_dc1_spare3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc1_dc_dc1_spare3_decode(uint16_t value);


/**
 * Pack message RxSDO1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_rx_sdo1_pack(
    uint8_t *dst_p,
    const struct cantools_rx_sdo1_t *src_p);
/**
 * Unpack message RxSDO1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_rx_sdo1_unpack(
    struct cantools_rx_sdo1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_sdo1_rx_sdo_power_current_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_sdo1_rx_sdo_power_current_mode_decode(uint8_t value);


/**
 * Pack message DcDc2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc2_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc2_t *src_p);
/**
 * Unpack message DcDc2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc2_unpack(
    struct cantools_dc_dc2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc2_dc_dc2_pwr_unit_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc2_dc_dc2_pwr_unit_temp_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc2_dc_dc2_max_avlb_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc2_dc_dc2_max_avlb_current_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc2_dc_dc2_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc2_dc_dc2_spare1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc2_dc_dc2_max_avlb_pwr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc2_dc_dc2_max_avlb_pwr_decode(uint16_t value);


/**
 * Pack message DcDc3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc3_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc3_t *src_p);
/**
 * Unpack message DcDc3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc3_unpack(
    struct cantools_dc_dc3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc3_dc_dc3_err_word1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc3_dc_dc3_err_word1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc3_dc_dc3_err_word2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc3_dc_dc3_err_word2_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc3_dc_dc3_err_word3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc3_dc_dc3_err_word3_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc3_dc_dc3_err_word4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc3_dc_dc3_err_word4_decode(uint16_t value);


/**
 * Pack message DcDc4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc4_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc4_t *src_p);
/**
 * Unpack message DcDc4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc4_unpack(
    struct cantools_dc_dc4_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc4_dc_dc4_warn_word1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc4_dc_dc4_warn_word1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc4_dc_dc4_warn_word2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc4_dc_dc4_warn_word2_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc4_dc_dc4_warn_word3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc4_dc_dc4_warn_word3_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc4_dc_dc4_warn_word4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc4_dc_dc4_warn_word4_decode(uint16_t value);


/**
 * Pack message DcDcCtrl1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_ctrl1_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_ctrl1_t *src_p);
/**
 * Unpack message DcDcCtrl1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_ctrl1_unpack(
    struct cantools_dc_dc_ctrl1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_main_sp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_main_sp_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_main_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_main_mode_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_en_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_en_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_rele_out_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_rele_out_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dcdc_ctrl1_span1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dcdc_ctrl1_span1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_fault_ack_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_fault_ack_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_rele_in_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_rele_in_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dc_dc_ctrl1_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dc_dc_ctrl1_on_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dcdc_ctrl1_span2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dcdc_ctrl1_span2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_ctrl1_dcdc_ctrl1_span3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dcdc_ctrl1_span3_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_ctrl1_dcdc_ctrl1_span4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl1_dcdc_ctrl1_span4_decode(uint16_t value);


/**
 * Pack message DcDcCtrl2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_ctrl2_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_ctrl2_t *src_p);
/**
 * Unpack message DcDcCtrl2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_ctrl2_unpack(
    struct cantools_dc_dc_ctrl2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl2_dc_dc_ctrl2_ils_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl2_dc_dc_ctrl2_ils_max_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl2_dc_dc_ctrl2_ils_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl2_dc_dc_ctrl2_ils_min_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl2_dc_dc_ctrl2_uls_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl2_dc_dc_ctrl2_uls_max_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl2_dc_dc_ctrl2_uls_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl2_dc_dc_ctrl2_uls_min_decode(int16_t value);


/**
 * Pack message DcDcCtrl3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_ctrl3_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_ctrl3_t *src_p);
/**
 * Unpack message DcDcCtrl3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_ctrl3_unpack(
    struct cantools_dc_dc_ctrl3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl3_dc_dc_ctrl3_ihs_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl3_dc_dc_ctrl3_ihs_max_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl3_dc_dc_ctrl3_ihs_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl3_dc_dc_ctrl3_ihs_min_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl3_dc_dc_ctrl3_uhs_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl3_dc_dc_ctrl3_uhs_max_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_ctrl3_dc_dc_ctrl3_uhs_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_ctrl3_dc_dc_ctrl3_uhs_min_decode(int16_t value);


/**
 * Pack message DcDcSta1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta1_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta1_t *src_p);
/**
 * Unpack message DcDcSta1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta1_unpack(
    struct cantools_dc_dc_sta1_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_uhs_lim_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_uhs_lim_min_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_uhs_lim_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_uhs_lim_max_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_ihs_lim_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_ihs_lim_min_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_ihs_lim_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_ihs_lim_max_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_uls_lim_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_uls_lim_min_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_uls_lim_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_uls_lim_max_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_ils_lim_min_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_ils_lim_min_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_ils_lim_max_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_ils_lim_max_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_err_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_err_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_warn_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_warn_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_rdy_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_rdy_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_run_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_run_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_spare1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_spare1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_spare2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_spare2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_fan_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_fan_act_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_spare3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_spare3_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta1_dc_dc_sta1_t_pow_unit_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_t_pow_unit_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta1_dc_dc_sta1_cur_avlbl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_cur_avlbl_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_rele_1_fbk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_rele_1_fbk_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_rele_2_fbk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_rele_2_fbk_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_rele_3_fbk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_rele_3_fbk_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_ls_pre_charge_fbk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_ls_pre_charge_fbk_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_hs_pre_charge_fbk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_hs_pre_charge_fbk_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_spare4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_spare4_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1_dc_dc_sta1_rol_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1_dc_dc_sta1_rol_cnt_decode(uint8_t value);


/**
 * Pack message DcDcSta2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta2_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta2_t *src_p);
/**
 * Unpack message DcDcSta2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta2_unpack(
    struct cantools_dc_dc_sta2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2_dc_dc_sta2_ils_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2_dc_dc_sta2_ils_act_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2_dc_dc_sta2_ihs_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2_dc_dc_sta2_ihs_act_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2_dc_dc_sta2_uls_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2_dc_dc_sta2_uls_act_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2_dc_dc_sta2_uhs_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2_dc_dc_sta2_uhs_act_decode(int16_t value);


/**
 * Pack message DcDcSta3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta3_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta3_t *src_p);
/**
 * Unpack message DcDcSta3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta3_unpack(
    struct cantools_dc_dc_sta3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3_dc_dc_sta3_err_wrd1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3_dc_dc_sta3_err_wrd1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3_dc_dc_sta3_err_wrd2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3_dc_dc_sta3_err_wrd2_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3_dc_dc_sta3_warn_wrd1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3_dc_dc_sta3_warn_wrd1_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3_dc_dc_sta3_warn_wrd2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3_dc_dc_sta3_warn_wrd2_decode(uint16_t value);


/**
 * Pack message DcDcSta5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta5_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta5_t *src_p);
/**
 * Unpack message DcDcSta5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta5_unpack(
    struct cantools_dc_dc_sta5_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp3_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5_dc_dc_sta5_trafo_temp4_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta5_dc_dc_sta5_uls_est_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5_dc_dc_sta5_uls_est_act_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta5_dc_dc_sta5_uhs_est_act_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5_dc_dc_sta5_uhs_est_act_decode(int16_t value);


/**
 * Pack message DcDcSta6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta6_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta6_t *src_p);
/**
 * Unpack message DcDcSta6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta6_unpack(
    struct cantools_dc_dc_sta6_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_ind_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_ind_temp1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_ind_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_ind_temp2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_ind_temp3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_ind_temp3_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_ind_temp4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_ind_temp4_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp1_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp2_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp3_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6_dc_dc_sta6_pcb_temp4_decode(uint8_t value);


/**
 * Pack message DcDcSta1b.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta1b_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta1b_t *src_p);
/**
 * Unpack message DcDcSta1b.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta1b_unpack(
    struct cantools_dc_dc_sta1b_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_uhs_lim_min_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_uhs_lim_min_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_uhs_lim_max_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_uhs_lim_max_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_ihs_lim_min_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_ihs_lim_min_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_ihs_lim_max_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_ihs_lim_max_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_uls_lim_min_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_uls_lim_min_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_uls_lim_max_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_uls_lim_max_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_ils_lim_min_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_ils_lim_min_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_ils_lim_max_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_ils_lim_max_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_err_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_err_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_warn_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_warn_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_rdy_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_rdy_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_run_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_run_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_spare1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_spare1_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_spare2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_spare2_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_fan_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_fan_act_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_spare3_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_spare3_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta1b_dc_dc_sta1_t_pow_unit_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_t_pow_unit_b_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta1b_dc_dc_sta1_cur_avlbl_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_cur_avlbl_b_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_rele_1_fbk_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_rele_1_fbk_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_rele_2_fbk_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_rele_2_fbk_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_rele_3_fbk_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_rele_3_fbk_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_ls_pre_charge_fbk_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_ls_pre_charge_fbk_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_hs_pre_charge_fbk_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_hs_pre_charge_fbk_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_spare4_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_spare4_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta1b_dc_dc_sta1_rol_cnt_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta1b_dc_dc_sta1_rol_cnt_b_decode(uint8_t value);


/**
 * Pack message DcDcSta2b.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta2b_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta2b_t *src_p);
/**
 * Unpack message DcDcSta2b.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta2b_unpack(
    struct cantools_dc_dc_sta2b_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2b_dc_dc_sta2_ils_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2b_dc_dc_sta2_ils_act_b_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2b_dc_dc_sta2_ihs_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2b_dc_dc_sta2_ihs_act_b_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2b_dc_dc_sta2_uls_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2b_dc_dc_sta2_uls_act_b_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta2b_dc_dc_sta2_uhs_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta2b_dc_dc_sta2_uhs_act_b_decode(int16_t value);


/**
 * Pack message DcDcSta3b.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta3b_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta3b_t *src_p);
/**
 * Unpack message DcDcSta3b.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta3b_unpack(
    struct cantools_dc_dc_sta3b_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3b_dc_dc_sta3_err_wrd1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3b_dc_dc_sta3_err_wrd1_b_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3b_dc_dc_sta3_err_wrd2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3b_dc_dc_sta3_err_wrd2_b_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3b_dc_dc_sta3_warn_wrd1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3b_dc_dc_sta3_warn_wrd1_b_decode(uint16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cantools_dc_dc_sta3b_dc_dc_sta3_warn_wrd2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta3b_dc_dc_sta3_warn_wrd2_b_decode(uint16_t value);


/**
 * Pack message DcDcSta5b.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta5b_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta5b_t *src_p);
/**
 * Unpack message DcDcSta5b.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta5b_unpack(
    struct cantools_dc_dc_sta5b_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp1_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp2_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp3_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp3_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp4_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5b_dc_dc_sta5_trafo_temp4_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta5b_dc_dc_sta5_uls_est_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5b_dc_dc_sta5_uls_est_act_b_decode(int16_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cantools_dc_dc_sta5b_dc_dc_sta5_uhs_est_act_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta5b_dc_dc_sta5_uhs_est_act_b_decode(int16_t value);


/**
 * Pack message DcDcSta6b.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_dc_dc_sta6b_pack(
    uint8_t *dst_p,
    const struct cantools_dc_dc_sta6b_t *src_p);
/**
 * Unpack message DcDcSta6b.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_dc_dc_sta6b_unpack(
    struct cantools_dc_dc_sta6b_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp1_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp2_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp3_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp3_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp4_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_ind_temp4_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp1_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp2_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp3_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp3_b_decode(uint8_t value);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp4_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_dc_dc_sta6b_dc_dc_sta6_pcb_temp4_b_decode(uint8_t value);


/**
 * Pack message TxSDO2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_sdo2_pack(
    uint8_t *dst_p,
    const struct cantools_tx_sdo2_t *src_p);
/**
 * Unpack message TxSDO2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_sdo2_unpack(
    struct cantools_tx_sdo2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_sdo2_tx_sdo_power_current_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_sdo2_tx_sdo_power_current_reference_decode(uint8_t value);


/**
 * Pack message TxSDO3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_tx_sdo3_pack(
    uint8_t *dst_p,
    const struct cantools_tx_sdo3_t *src_p);
/**
 * Unpack message TxSDO3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_tx_sdo3_unpack(
    struct cantools_tx_sdo3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_tx_sdo3_tx_sdo_power_current_min_handling_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_tx_sdo3_tx_sdo_power_current_min_handling_decode(uint8_t value);


/**
 * Pack message RxSDO2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_rx_sdo2_pack(
    uint8_t *dst_p,
    const struct cantools_rx_sdo2_t *src_p);
/**
 * Unpack message RxSDO2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_rx_sdo2_unpack(
    struct cantools_rx_sdo2_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_sdo2_rx_sdo_power_current_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_sdo2_rx_sdo_power_current_reference_decode(uint8_t value);


/**
 * Pack message RxSDO3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 *
 * @return Size of packed data, or negative error code.
 */
int cantools_rx_sdo3_pack(
    uint8_t *dst_p,
    const struct cantools_rx_sdo3_t *src_p);
/**
 * Unpack message RxSDO3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 *
 * @return zero(0) or negative error code.
 */
int cantools_rx_sdo3_unpack(
    struct cantools_rx_sdo3_t *dst_p,
    const uint8_t *src_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cantools_rx_sdo3_rx_sdo_power_current_min_handling_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cantools_rx_sdo3_rx_sdo_power_current_min_handling_decode(uint8_t value);



#ifdef __cplusplus
}
#endif

#endif
